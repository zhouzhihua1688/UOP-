new Vue({
    el: '#content',
    data: {
        //查询条件
        modelName: '',
        modelDesc: '',
        modelId: '',
        //主页面相关数据
        tableData: [],
        blockTableData: [],
        recommendList: [],
        messageCenterList: [],
        awardMgmtList: [],
        nodeTypeList: [],
        nodeConfigList: [],
        groupInfoList: [],
        userId: '',
        diaMsg: '',
        previewPath: '',
        loadingStatus: '数据获取中...',
        loadingStatus1: '数据获取中...',
        updateId: '',
        updateId1: '',
        deleteId: '',
        isUpdate: false,
        isUpdate1: false,
        nodeType: '',
        openUrl: '',
        commonId: '',
        isEnableModelId: '',
        isEnableBlockId: '',
        isEnableFlag: '',
        //dialog新增修改数据
        diamodelName: '',
        diamodelDesc: '',
        //模型子块的新增修改数据
        diablockName: '',
        diablockDesc: '',
        diastepNumber: '',
        diatriggerType: '',
        diatakeEffectType: '',
        diatriggerCron: '',
        diatriggerTargetType: '',
        diatriggerTargetContent: '',
        diatargetUserGroups: [],
        diatriggerBussinessNodeKeys: '',
        //级数累加
        blockTotalAdd: 0,
        //发布修改数据
        releaseId: '',
        releaseStatus: '',
        //主表格分页数据
        currentIndex: 0,
        maxSpace: 5,
        totalPage: 0,
        pageMaxNum: 10,
        //dialog分页数据
        currentIndex1: 0,
        maxSpace1: 5,
        totalPage1: 0,
        pageMaxNum1: 10,
    },
    computed: {
        pageList: function () {
            var arr = [];
            if (this.totalPage <= 2 * this.maxSpace) {
                for (var i = 0; i < this.totalPage; i++) {
                    arr.push(i + 1);
                }
                return arr;
            }
            if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
                for (var i = this.currentIndex - this.maxSpace; i < this.currentIndex + this.maxSpace; i++) {
                    arr.push(i + 1);
                }
            } else if (this.currentIndex <= this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
                for (var i = 0; i < this.currentIndex + (2 * this.maxSpace - this.currentIndex); i++) {
                    arr.push(i + 1);
                }
            } else if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex <= this.maxSpace) {
                var space = this.totalPage - this.currentIndex;
                for (var i = this.currentIndex - (2 * this.maxSpace - space); i < this.totalPage; i++) {
                    arr.push(i + 1);
                }
            } else {
                for (var i = 0; i < this.totalPage; i++) {
                    arr.push(i + 1);
                }
            }
            return arr;
        },
        pageList1: function () {
            var arr = [];
            if (this.totalPage1 <= 2 * this.maxSpace1) {
                for (var i = 0; i < this.totalPage1; i++) {
                    arr.push(i + 1);
                }
                return arr;
            }
            if (this.currentIndex1 > this.maxSpace1 && this.totalPage1 - this.currentIndex1 > this.maxSpace1) {
                for (var i = this.currentIndex1 - this.maxSpace1; i < this.currentIndex1 + this.maxSpace1; i++) {
                    arr.push(i + 1);
                }
            } else if (this.currentIndex1 <= this.maxSpace1 && this.totalPage1 - this.currentIndex1 > this.maxSpace1) {
                for (var i = 0; i < this.currentIndex1 + (2 * this.maxSpace1 - this.currentIndex1); i++) {
                    arr.push(i + 1);
                }
            } else if (this.currentIndex1 > this.maxSpace1 && this.totalPage1 - this.currentIndex1 <= this.maxSpace1) {
                var space = this.totalPage1 - this.currentIndex1;
                for (var i = this.currentIndex1 - (2 * this.maxSpace1 - space); i < this.totalPage1; i++) {
                    arr.push(i + 1);
                }
            } else {
                for (var i = 0; i < this.totalPage1; i++) {
                    arr.push(i + 1);
                }
            }
            return arr;
        }
    },
    watch: {
        pageMaxNum: function () {
            this.getTableData(0);
        },
        pageMaxNum1: function () {
            this.getBlockTableData(0, this.modelId);
        },
        nodeType: {
            handler: function (val, oldval) {
                var _this = this;
                // 触发节点
                $.post({
                    url: '/automatedOperation/modelMgmt/modelConfigMgmt/queryNodeConfig.ajax',
                    data: {
                        pageNo: 1,
                        pageSize: 999,
                        nodeType: val
                    },
                    success: function (result) {
                        if (result.error === 0) {
                            _this.nodeConfigList = result.data.rows;
                        } else {
                            _this.nodeConfigList = [];
                            _this.showDialog('', 'info', false, result.msg);
                        }
                    }
                });
            }
        },
        diatriggerTargetType: {
            handler: function (val, oldval) {
                if (val) {
                    if (val == '1') {
                        this.openUrl = '/automatedOperation/reachContentMgmt/recommendSystemConfig.html';
                        this.makeSelectOption(0, this.groupInfoList.length,this.diatargetUserGroups);
                    } else if (val == '2') {
                        this.openUrl = '/messageCenter/ruleMgmt/ruleMgmt.html';
                        this.makeSelectOption(1, this.groupInfoList.length,this.diatargetUserGroups);
                    } else if (val == '3') {
                        this.openUrl = '/awardMgmt/awardSetting/awardTable.html';
                        this.makeSelectOption(1, this.groupInfoList.length,this.diatargetUserGroups);
                    }
                    else {
                        this.openUrl = '';
                        this.makeSelectOption(0, this.groupInfoList.length,this.diatargetUserGroups);
                    }
                } else {
                    this.openUrl = '';
                    this.makeSelectOption(0, this.groupInfoList.length,this.diatargetUserGroups);
                }

            }
        },
        diatriggerTargetContent: {
            handler: function (val, oldval) {
                var _this = this;
                if (_this.diatriggerTargetType == '1') {
                    _this.recommendList.forEach(function (value) {
                        if (val == value.id) {
                            _this.diatargetUserGroups = value.themeRelatedUserGroups.split(',');
                        }
                    });
                    this.makeSelectOption(0, this.groupInfoList.length,_this.diatargetUserGroups);
                }
            }
        },
        // diatriggerTargetType:function () {
        //     this.diatargetUserGroups=''
        // }
    },
    mounted: function () {
        var _this = this;
        var dialogs = ['info', 'add', 'release', 'addBlock','releaseModelOk','offlineModelOk','refreshCurrentOk','refreshOk','isEnableOk'];
        dialogs.forEach(function (id) {
            $('#' + id).on('shown.bs.modal', function () {
                var $this = $(this);
                var dialog = $this.find('.modal-dialog');
                var top = ($(window).height() - dialog.height()) / 2;
                dialog.css({
                    marginTop: top
                });
            });
        });
        $('.date-timepicker').datetimepicker({
            format: 'YYYY-MM-DD HH:mm:ss', //use this option to display seconds
            icons: {
                time: 'fa fa-clock-o',
                date: 'fa fa-calendar',
                up: 'fa fa-chevron-up',
                down: 'fa fa-chevron-down',
                previous: 'fa fa-chevron-left',
                next: 'fa fa-chevron-right',
                today: 'fa fa-arrows ',
                clear: 'fa fa-trash',
                close: 'fa fa-times'
            }
        }).next().on(ace.click_event, function () {
            $(this).prev().focus();
        });
        $("#cron").cronGen({
            direction: 'right'
        });
        $('#cronLabel').insertBefore($('.cronValue').eq(0));
        //chosen
        $(".diatargetUserGroups").chosen({
            /*max_selected_options: 2,*/
            no_results_text: "没有找到",
            allow_single_deselect: true,
            search_contains: true,
            width: '200px',
            disable_search: 'false',
            case_sensitive_search: false
        });

        $.post({
            url: '/automatedOperation/modelMgmt/modelConfigMgmt/queryNodeType.ajax',
            data: {
                pageNo: 1,
                pageSize: 999
            },
            success: function (result) {
                if (result.error === 0) {
                    _this.nodeTypeList = result.data.rows;
                } else {
                    _this.nodeTypeList = [];
                    _this.showDialog('', 'info', false, result.msg);
                }
            }
        });

        this.getUserGroup();
        this.getOtherSystemList();
        this.getTableData(0);
    },
    methods: {
        // 获取用户组
        getUserGroup: function () {
            var _this = this;
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/userGroup.ajax',
                success: function (result) {
                    if (result.error === 0) {
                        _this.groupInfoList = result.data;
                        _this.makeSelectOption(0, result.data.length);
                    } else {
                        _this.groupInfoList = [];
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        makeSelectOption: function (start, end, value) {
            var str = '';
            for (var i = start; i < end; i++) {
                str += '<option value="' + this.groupInfoList[i].groupId + '">' + this.groupInfoList[i].groupId + ' ' + this.groupInfoList[i].groupName + '</option>';
            }
            $('.diatargetUserGroups').html(str);
            value&&$('.diatargetUserGroups').val(value);
            $('.diatargetUserGroups').trigger('chosen:updated');
        },
        // 获取其他系统的数据
        getOtherSystemList: function () {
            var _this = this;
            //获取推荐系统配置list
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/recommendList.ajax',
                data: {
                    pageNo: 1,
                    pageSize: 999
                },
                success: function (result) {
                    if (result.error === 0) {
                        _this.recommendList = result.data.rows;
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
            //获取消息中心list
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/messageCenterList.ajax',
                data: {
                    ruleSource:'AOS'
                },
                success: function (result) {
                    if (result.error === 0) {
                        _this.messageCenterList = result.data;
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
            //获取奖励配置list
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/awardMgmtList.ajax',
                data: {
                    pageNo: 1,
                    pageSize: 999
                },
                success: function (result) {
                    if (result.error === 0) {
                        _this.awardMgmtList = result.data.rows;
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        //主页面的增删改查
        getTableData: function (currentIndex) {
            var params = {};
            var _this = this;
            params.pageNo = currentIndex + 1;
            params.pageSize = this.pageMaxNum;
            params.modelName = this.modelName;
            params.modelDesc = this.modelDesc;
            _this.loadingStatus = '数据获取中...';
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/searchList.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        _this.userId = result.data.userId;
                        if (result.data.rows && result.data.rows.length > 0) {
                            _this.tableData = result.data.rows;
                            _this.currentIndex = result.data.pageNum - 1;
                            _this.totalPage = result.data.pages;
                        } else {
                            _this.tableData = [];
                            _this.currentIndex = 0;
                            _this.totalPage = 0;
                            _this.loadingStatus = '没有数据';
                        }

                    } else {
                        _this.tableData = [];
                        _this.currentIndex = 0;
                        _this.totalPage = 0;
                        _this.showDialog('', 'info', false, result.msg);
                        _this.loadingStatus = '没有数据';
                    }
                }
            });
        },
        //新增活动配置
        setAddData: function (obj) {
            this.diamodelName = obj.modelName ? obj.modelName : '';
            this.diamodelDesc = obj.modelDesc ? obj.modelDesc : '';
            $('#startTime').val(obj.startTime ? obj.startTime : '');
            $('#endTime').val(obj.endTime ? obj.endTime : '');
        },
        showAdd: function () {
            this.isUpdate = false;
            this.updateId = '';
            this.setAddData({});
            this.showDialog('', 'add');
        },
        showUpdate: function (item) {
            this.isUpdate = true;
            this.updateId = item.modelId;
            this.setAddData(item);
            this.showDialog('', 'add');
        },
        add: function () {
            if (this.diamodelName == '') {
                this.showDialog('add', 'info', true, '名称必须填写！');
                return false;
            }
            if (this.diamodelDesc == '') {
                this.showDialog('add', 'info', true, '描述必须填写！');
                return false;
            }
            var _this = this;
            var params = {};
            params.modelName = this.diamodelName;
            params.modelDesc = this.diamodelDesc;
            params.startTime = $('#startTime').val();
            params.endTime = $('#endTime').val();
            this.isUpdate && (params.modelId = this.updateId);
            !this.isUpdate && (params.createBy = this.userId) && (params.modifyBy = this.userId);
            this.isUpdate && (params.modifyBy = this.userId);
            var url = '/automatedOperation/modelMgmt/modelConfigMgmt/';
            url += this.isUpdate ? 'update.ajax' : 'add.ajax';
            $.post({
                url: url,
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        _this.getTableData(0);
                    }
                    _this.showDialog('add', 'info', false, result.msg);
                }
            });
        },
        //dialog中模型子块的增删改查
        getBlockTableData: function (currentIndex, modelId) {
            var params = {};
            var _this = this;
            params.pageNo = currentIndex + 1;
            params.pageSize = this.pageMaxNum1;
            params.modelId = modelId;
            _this.loadingStatus1 = '数据获取中...';
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/searchBlock.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        if (result.data.rows && result.data.rows.length > 0) {
                            _this.blockTableData = result.data.rows;
                            _this.currentIndex1 = result.data.pageNum - 1;
                            _this.totalPage1 = result.data.pages;
                            _this.blockTotalAdd = result.data.total;
                        } else {
                            _this.blockTableData = [];
                            _this.currentIndex1 = 0;
                            _this.totalPage1 = 0;
                            _this.loadingStatus1 = '没有数据';
                        }

                    } else {
                        _this.blockTableData = [];
                        _this.currentIndex1 = 0;
                        _this.totalPage1 = 0;
                        _this.showDialog('', 'info', false, result.msg);
                        _this.loadingStatus1 = '没有数据';
                    }
                }
            });
        },
        checkSubBlock: function (item) {
            this.modelId = item.modelId;
            this.getBlockTableData(0, this.modelId);
            this.showDialog('', 'blockTable');
        },
        //新增活动配置
        setAddData1: function (obj) {
            this.diablockName = obj.blockName ? obj.blockName : '';
            this.diablockDesc = obj.blockDesc ? obj.blockDesc : '';
            this.diastepNumber = obj.stepNumber ? obj.stepNumber : '';
            this.diatriggerType = obj.triggerType ? obj.triggerType : '';
            this.diatakeEffectType = obj.takeEffectType ? obj.takeEffectType : '';

            this.diatriggerTargetType = obj.triggerTargetType ? obj.triggerTargetType : '';
            this.diatriggerTargetContent = obj.triggerTargetContent ? obj.triggerTargetContent : '';
            this.diatargetUserGroups = obj.targetUserGroups ? obj.targetUserGroups.split(',') : [];
            this.diatriggerBussinessNodeKeys = obj.triggerBussinessNodeKeys ? obj.triggerBussinessNodeKeys : '';
            $('.cronValue').val(obj.triggerCron ? obj.triggerCron : '');
            $('#cron').val(obj.triggerCron ? obj.triggerCron : '');
        },
        showAddBlock: function () {
            this.isUpdate1 = false;
            this.updateId1 = '';
            $('.diatargetUserGroups').val('');
            $('.diatargetUserGroups').trigger('chosen:updated');
            this.setAddData1({});
            this.diastepNumber = this.blockTotalAdd + 1;
            this.showDialog('blockTable', 'addBlock', true);
        },
        showUpdateBlock: function (item) {
            this.isUpdate1 = true;
            this.updateId1 = item.blockId;
            this.setAddData1(item);
            this.showDialog('blockTable', 'addBlock', true);
            this.makeSelectOption(0, this.groupInfoList.length,this.diatargetUserGroups);
        },
        addSubContent: function () {
            var _this = this;
            var params = {};
            params.blockName = this.diablockName;
            params.blockDesc = this.diablockDesc;
            params.stepNumber = this.diastepNumber;
            params.triggerType = this.diatriggerType;
            params.takeEffectType = this.diatakeEffectType;
            params.triggerCron = $('.cronValue').eq(0).val();
            params.triggerTargetType = this.diatriggerTargetType;
            params.triggerTargetContent = this.diatriggerTargetContent;
            params.targetUserGroups = $('.diatargetUserGroups').val() ? $('.diatargetUserGroups').val().join(',') : '';
            params.triggerBussinessNodeKeys = this.diatriggerBussinessNodeKeys;
            params.modelId = this.modelId;
            this.isUpdate1 && (params.blockId = this.updateId1);
            !this.isUpdate1 && (params.createBy = this.userId) && (params.modifyBy = this.userId);
            this.isUpdate1 && (params.modifyBy = this.userId);
            var url = '/automatedOperation/modelMgmt/modelConfigMgmt/';
            url += this.isUpdate1 ? 'updateModelBlock.ajax' : 'addModelBlock.ajax';
            $.post({
                url: url,
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        _this.getBlockTableData(0, _this.modelId);
                    }
                    $("#addBlock").modal('hide');
                    _this.showDialog('blockTable', 'info', true, result.msg);
                    // _this.showDialog('', '');
                }
            });
        },
        //是否禁用模型子块
        isEnableOk:function (item) {
            this.isEnableBlockId=item.blockId;
            this.isEnableModelId=item.modelId;
            this.isEnableFlag = item.enable == '0' ? '1' : '0';
            this.showDialog('blockTable', 'isEnableOk', true);
        },
        isEnable: function () {
            var _this = this;
            var params = {};
            params.modelId = this.isEnableModelId;
            params.blockId = this.isEnableBlockId;
            params.modifyBy = this.userId;
            params.enable = this.isEnableFlag;
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/isEnable.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        _this.getBlockTableData(0, _this.modelId);
                        // _this.showDialog('', 'info', false, result.msg);
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        //模型子块刷新
        refreshOk:function () {
            this.showDialog('', 'refreshOk', false);
        },
        refresh: function () {
            var _this = this;
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/refresh.ajax',
                success: function (result) {
                    if (result.error === 0) {
                        _this.showDialog('', 'info', false, result.msg);
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },

        //模型发布
        releaseModelOk:function (item) {
            this.commonId=item.modelId;
            this.showDialog('', 'releaseModelOk', false);
        },
        releaseModel: function () {
            var _this = this;
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/releaseModel.ajax',
                data: {
                    modelId: this.commonId
                },
                success: function (result) {
                    if (result.error === 0) {
                        _this.getTableData(0);
                        _this.showDialog('', 'info', false, result.msg);
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        //模型下线
        offlineModelOk:function (item) {
            this.commonId=item.modelId;
            this.showDialog('', 'offlineModelOk', false);
        },
        offlineModel: function () {
            var _this = this;
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/offlineModel.ajax',
                data: {
                    modelId: this.commonId
                },
                success: function (result) {
                    if (result.error === 0) {
                        _this.getTableData(0);
                        _this.showDialog('', 'info', false, result.msg);
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        refreshCurrentOk:function (item) {
            this.commonId=item.modelId;
            this.showDialog('', 'refreshCurrentOk', false);
        },
        refreshCurrent: function () {
            var _this = this;
            $.post({
                url: '/automatedOperation/modelMgmt/modelConfigMgmt/refreshModel.ajax',
                data: {
                    modelId: this.commonId
                },
                success: function (result) {
                    if (result.error === 0) {
                        _this.getTableData(0);
                        _this.showDialog('', 'info', false, result.msg);
                    } else {
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        // 打开新的tab页
        openTab: function () {
            if (this.openUrl) {
                window.open(this.openUrl);
            } else {
                // $("#blockTable").modal('hide');
                // this.showDialog('addBlock', 'info', true, '选择触达类型后才能跳转到相关的Tab页');
                alert('选择触达类型后才能跳转到相关的Tab页')
            }
        },
        // 刷新各系统接口节点重新拉取
        freshNode: function () {
            this.getOtherSystemList();
        },
        //各个刷新发布禁用弹窗

        //主表格分页方法
        check: function (item) {
            item.check = !item.check;
        },
        allCheck: function () {
            var _this = this;
            var flag = this.checkAll;
            this.tableData.forEach(function (item) {
                item.check = !flag;
            });
        },
        prev: function () {
            if (this.currentIndex <= 0) {
                return;
            }
            this.getTableData(this.currentIndex - 1);
        },
        next: function () {
            if (this.currentIndex >= this.totalPage - 1) {
                return;
            }
            this.getTableData(this.currentIndex + 1);
        },
        changeIndex: function (index) {
            this.getTableData(index - 1);
        },
        toFirst: function () {
            this.getTableData(0);
        },
        toLast: function () {
            this.getTableData(this.totalPage - 1);
        },
        prev1: function () {
            if (this.currentIndex1 <= 0) {
                return;
            }
            this.getBlockTableData(this.currentIndex1 - 1, this.modelId);
        },
        next1: function () {
            if (this.currentIndex1 >= this.totalPage1 - 1) {
                return;
            }
            this.getBlockTableData(this.currentIndex1 + 1, this.modelId);
        },
        changeIndex1: function (index) {
            this.getBlockTableData(index - 1, this.modelId);
        },
        toFirst1: function () {
            this.getBlockTableData(0, this.modelId);
        },
        toLast1: function () {
            this.getBlockTableData(this.totalPage1 - 1, this.modelId);
        },
        //公共方法
        showDialog: function (dia1, dia2, callback, msg) {
            if (msg) {
                this.diaMsg = msg;
            } else {
                msg = '输入条件错误';
            }
            if (!dia1) {
                $('#' + dia2).modal('show');
            } else if (!dia2) {
                $('#' + dia1).modal('hide');
            } else if (!callback) {
                $('#' + dia1).on("hidden.bs.modal", function () {
                    $('#' + dia2).modal('show');
                    $('#' + dia1).off().on("hidden", "hidden.bs.modal");
                });
                $('#' + dia1).modal('hide');
            } else {
                $('#' + dia1).on("hidden.bs.modal", function () {
                    $('#' + dia2).on("hidden.bs.modal", function () {
                        $('#' + dia1).modal("show");
                        $('#' + dia2).off().on("hidden", "hidden.bs.modal");
                    });
                    $('#' + dia2).modal("show");
                    $('#' + dia1).off().on("hidden", "hidden.bs.modal");
                });
                $('#' + dia1).modal('hide');
            }
        },
        inSelected: function (item, arr, prop) {
            var _index = -1;
            arr.forEach(function (value, index) {
                if (item[prop] == value[prop]) {
                    _index = index;
                }
            });
            return _index;
        },
        formatTime: function (timestamp) {
            var date = new Date(timestamp); //时间戳为10位需*1000，时间戳为13位的话不需乘1000
            var Y = date.getFullYear() + '-';
            var M = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';
            var D = (date.getDate() < 10 ? '0' + date.getDate() : date.getDate()) + ' ';
            var h = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';
            var m = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';
            var s = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());
            return Y + M + D + h + m + s;
        },
        overflowHide: function (val) {
            var str = '';
            if (val) {
                str = val.toString();
                if (str.length > 10) {
                    str = str.substring(0, 10) + '...'
                }
            } else {
                str = '-'
            }
            return str;
        },
        stringTimeFat: function (val) {
            if (val) {
                return val.slice(0, 19);
            } else {
                return ''
            }
        },
        backTimeFat: function (val) {
            if (val) {
                val = val.toString();
                var arr = val.split("-");
                var brr = arr[arr.length - 1].split('.');
                try {
                    arr[1] = arr[1].length > 1 ? arr[1] : '0' + arr[1];
                    brr[0] = brr[0].length > 1 ? brr[0] : '0' + brr[0];
                    brr[1] = brr[1].length > 1 ? brr[1] : '0' + brr[1];
                    brr[2] = brr[2].length > 1 ? brr[2] : '0' + brr[2];
                    brr[3] = brr[3].trim().length > 1 ? brr[3].trim() : '0' + brr[3].trim();
                    val = arr[0] + '-' + arr[1] + '-' + brr[0] + ' ' + brr[1] + ':' + brr[2] + ':' + brr[3]
                } catch (err) {
                    val = val.toString();
                }
            } else {
                val = '-'
            }
            return val;
        },
        // 模型子块翻译
        // 1.触发类型翻译
        triggerTypeTransLate: function (val) {
            if (val) {
                var val = val == '1' ? '节点触发' : '非节点触发';
                return val;
            } else {
                return '-'
            }
        },
        // 2.生效类型翻译
        takeEffectTypeTransLate: function (val) {
            if (val) {
                var str = '';
                switch (val) {
                    case '00':
                        str = '实时生效';
                        break;
                    case '01':
                        str = '定时单次生效';
                        break;
                    case '02':
                        str = '定时区间生效';
                        break;
                    case '03':
                        str = '定时周期生效';
                        break;
                    default:
                        break;
                }
                return str;
            } else {
                return '-'
            }
        },
        //3.触达类型翻译
        triggerTargetTypeTranslate: function (val) {
            if (val) {
                var str = '';
                switch (val) {
                    case '1':
                        str = '推荐系统';
                        break;
                    case '2':
                        str = '消息中心';
                        break;
                    case '3':
                        str = '奖励系统';
                        break;
                    default:
                        break;
                }
                return str;
            } else {
                return '-'
            }
        }
    }
});