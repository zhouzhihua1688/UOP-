new Vue({
    el: '#content',
    data: {
        reportName:'',  //季报名称
        reportYear:'',  //季报年度
        reportQuarter:'',  //季报季度
        groupId: '',      //投顾策略ID
        groupIdList: [],
        //主页面相关数据
        tableData: [],
        diaMsg: '',
        deleteId: '',
        reportSerialNo:'',
        reportType:'',
        dialog: {
            serialno: '',
            groupId: '',
            title: '',
            content: '',

            agreementPerformance:'', //投顾协议履行情况 ,
            creator:'', //创建人 ,
            groups:[], //关联策略组合列表 ,
            marketReviewOutlook:'', //市场回顾与展望 ,
            remark:'', //备注 ,
            reportName:'', //季报名称: ,
            reportQuarter:'', //季报季度: = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'],
            reportUrl:'', //季报url地址 ,
            reportYear:'', //季报年度（YYYY) ,
            strategyAdjustment:'', //组合策略调整情况 ,
            tradeExecutionBias:'', //交易执行偏差情况

        },
        strategyArr:[],
        groupList:[],

        checkBoxIndex:'',
        checked:'',
        checkModel:[],
        // 留痕展示数据
        recordData:'',
        //主表格分页数据
        currentIndex: 0,
        maxSpace: 5,
        totalPage: 1,
        pageMaxNum: 10,
        getArrId:[],
        hasGroupArrId:[],  //获取groupid--
        getStr:'',
    },
    computed: {
        pageList: function () {
            var arr = [];
            if (this.totalPage <= 2 * this.maxSpace) {
                for (var i = 0; i < this.totalPage; i++) {
                    arr.push(i + 1);
                }
                return arr;
            }
            if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
                for (var i = this.currentIndex - this.maxSpace; i < this.currentIndex + this.maxSpace; i++) {
                    arr.push(i + 1);
                }
            } else if (this.currentIndex <= this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
                for (var i = 0; i < this.currentIndex + (2 * this.maxSpace - this.currentIndex); i++) {
                    arr.push(i + 1);
                }
            } else if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex <= this.maxSpace) {
                var space = this.totalPage - this.currentIndex;
                for (var i = this.currentIndex - (2 * this.maxSpace - space); i < this.totalPage; i++) {
                    arr.push(i + 1);
                }
            } else {
                for (var i = 0; i < this.totalPage; i++) {
                    arr.push(i + 1);
                }
            }
            return arr;
        },
    },
    watch: {
        pageMaxNum: function () {
            this.currentIndex = 0;
            this.getTableData(0);
        },
    },
    mounted: function () {
        var _this=this;
        var dialogs = ['info', 'delete'];
        dialogs.forEach(function (id) {
            $('#' + id).on('shown.bs.modal', function () {
                var $this = $(this);
                var dialog = $this.find('.modal-dialog');
                var top = ($(window).height() - dialog.height()) / 2;
                dialog.css({
                    marginTop: top
                });
            });
        });

        var fundArr = ["fundGroupsList"];
        fundArr.forEach(function (value) {
            $('#' + value).chosen({
                search_contains:true,
                no_results_text: '未找到相关基金信息',
                disable_search_threshold:6,
                width: '175px'
            });
        });
        $('#fundGroupsList').on('change', function (e, params) {
            _this.groupId = params ? params.selected : '';
        });

        this.getTableData(0);
        this.getFundGroupList('');
    },
    methods: {

        // 获取基金组合列表
        getFundGroupList: function (param) {
            var _this = this;
            _this.strategyArr = []
            _this.groupList = []
            var arr = [
                {
                    strategyName: '教育金',
                    typeof: 'educationStrategy'
                }, {
                    strategyName: '养老金',
                    typeof: 'forAgedStrategy'
                },
                {
                    strategyName: '稳健理财',
                    typeof: 'steadyStrategy'
                },
                {
                    strategyName: '长期投资',
                    typeof: 'equityStrategy'
                },
                {
                    strategyName: '活钱管理',
                    typeof: 'quickStrategy'
                }
            ]

            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/fundGroups.ajax',
                success: function (result) {
                    if (result.error === 0) {
                        _this.fundGroupList = result.data;
                        if (param !== 'nofor') {
                            var obj = {}
                            var newList = []
                            // 判断是不是投顾
                            result.data.forEach(item => { if (item.isInvestment == 'Y' && item.fundgroupType >= 13 && item.fundgroupType <= 17) newList.push(item) })
                       
                            newList.forEach((item, index) => {
                                if (!obj[item.fundgroupTypeName]) {
                                    obj[item.fundgroupTypeName] = {};
                                }
                                if (!obj[item.fundgroupTypeName][item.groupName]) {
                                    obj[item.fundgroupTypeName][item.groupName] = item.groupId;
                                } else {
                                    obj[item.fundgroupTypeName][item.groupName] = obj[item.fundgroupTypeName][item.groupName] + '_' + item.groupId;
                                }
                            })
                            arr.forEach((groupName, index) => {
                                _this.groupList.push({
                                    strategyName: groupName.strategyName,
                                    typeof: groupName.typeof,
                                    groupArr: []
                                })
                                for (let key in obj) {
                                    if (key === groupName.strategyName) {
                                        for (let kk in obj[key]) {
                                            _this.groupList[index].groupArr.push({
                                                fileName: '',
                                                groupName: '',
                                                fileUrl: '',
                                                groupId: obj[key][kk],
                                                name: kk
                                            })
                                        }
                                    }
                                }

                            })
                        }
                        _this.strategyArr = _this.groupList;

                        _this.strategyArr.forEach(function(item){
                               item.checked='N';
                            item.groupArr.map(itemArr=>{
                               itemArr.checked='N';
                          })
                        })


                        var str = '';
                        result.data.forEach(function(item) {
                            str += '<option value="' + item.groupId + '">' + item.groupId + '-' + item.groupName + '</option>';
                        });
                        var fundArr = ["fundGroupsList"];
                        fundArr.forEach(function (value) {
                            $('#' + value).html('<option value=""></option>' + str);
                            $('#' + value).trigger('chosen:updated');
                        });
                        console.log("strategyArr==",_this.strategyArr)
                    }
                }
            });
        },
        // 关联策略全选反选
        checkedAll:function(index){
          var _this=this;
          // let getArrId=[];
          // _this.checkBoxIndex=index;       
    
         if(_this.strategyArr[index].checked=='Y'){
            _this.strategyArr[index].checked='N';  //取消全选按钮
            let notArr=_this.strategyArr[index].groupArr.map(function(itemGroup){
                    itemGroup.checked='N';
                return itemGroup;
            })

            if(_this.hasGroupArrId.length<0){
               _this.hasGroupArrId=[];  //这一行防止全选后有不选了，要清空
            }
            if( _this.getArrId){

            }

            // _this.hasGroupArrId=[];  //这一行防止全选后有不选了，要清空

            // 拿到groupArr里的groupId
            let that_id=[];
            _this.strategyArr[index].groupArr.forEach(function(itemGroup){
                that_id.push(itemGroup.groupId)   
            })
            
            //过滤掉取消全选后的剩下的groupId 
            let filterId=_this.getArrId.concat(that_id).filter(function(v,i,arr){
                return arr.indexOf(v)===arr.lastIndexOf(v);
            })
            console.log("filterId",filterId);
            _this.getArrId=filterId;  //赋值

            _this.strategyArr[index].groupArr=notArr;   //取消勾选全部 -不选中子菜单 

         }else{
            _this.strategyArr[index].checked='Y';  //选中全选按钮
            _this.$set(_this.strategyArr[index], 'checked', 'Y')  //点击当前的某个全选
            let hasArr=_this.strategyArr[index].groupArr.map(itemGroup=>{  //点击全选选中当前所有子项目
                itemGroup.checked='Y';
                _this.getArrId.push(itemGroup.groupId);
                return itemGroup;
             })
            _this.strategyArr[index].groupArr=hasArr;   //选中当前全部-选中子菜单-重新赋值
         }       
        console.log(_this.strategyArr[index]);
        console.log(_this.strategyArr[index].groupArr);
        console.log(_this.getArrId);
        },

        // 关联策略多选，选择多个
        changeFn(itemGroup,index,indexGroup){
            console.log(itemGroup)
            var _this=this;
     
            let allId=[];
            if(_this.strategyArr[index].groupArr[indexGroup].checked=='Y'){  //点击子项目去取消当前勾选的哪一个

                _this.strategyArr[index].groupArr[indexGroup].checked='N';

                console.log("_this.getArrId",_this.getArrId)
                console.log("_this.hasGroupArrId",_this.hasGroupArrId)

                // 去除取消勾选的id
                if(_this.getArrId.length>0){  //如果有选中全选按钮的
                    // let subId=_this.hasGroupArrId.filter(function(item) {  //取消勾选去除数组里的id
                    //   return _this.strategyArr[index].groupArr[indexGroup].groupId==item;
                    // });
                    let subId=[];
                        subId.push(_this.strategyArr[index].groupArr[indexGroup].groupId);//获取当前取消的是哪一个

                    let merge=Array.from(new Set(_this.getArrId.concat(_this.hasGroupArrId))); //去重成新数组
                    
                    console.log('subId',subId)
                    console.log('merge',merge);

                    let lastId = merge.filter(items => {   //把要取消的那个在数组中移除
                        if (!subId.includes(items)) return items;
                    })
                    console.log(lastId);

                    _this.hasGroupArrId=lastId;
                    _this.getArrId=lastId;
                    
                    // let list =Array.from(new Set(_this.getArrId)).filter(items => {
                    //     if (!subId.includes(items)) return items;
                    // })
                    // console.log("list",list);
                    // _this.hasGroupArrId=Array.from(new Set(_this.getArrId.concat(subId)));

                }else{   //没有选中全选按钮的
                    let id=_this.hasGroupArrId.filter(function(item) {  //取消勾选去除数组里的id
                      return _this.strategyArr[index].groupArr[indexGroup].groupId!==item;
                    }); 
                    console.log("id===",id);
                    _this.hasGroupArrId=id;  //直接赋值
                }
                
                for (var i = 0; i < _this.strategyArr[index].groupArr.length; i++) {
                  allId.push(_this.strategyArr[index].groupArr[i].groupId);
                };
                // console.log('allId',allId);
                let strId=allId.every(function(val){  //选中的和现有的做对比
                     return _this.hasGroupArrId.includes(val);
                })

                console.log(strId);

                if(strId==false){
                    // console.log(_this.strategyArr);
                   
                    _this.strategyArr[index].checked='N';

                    _this.getStr=_this.strategyArr[index];

                    _this.strategyArr[index]=_this.getStr;


                    _this.$set(_this.strategyArr[index]);

                    _this.$set(_this.strategyArr);
                }
                     
            }else{  //点击子项目去勾选
            _this.strategyArr[index].groupArr[indexGroup].checked='Y' //勾选
            
            // 选中哪一个赋值哪一个
            _this.hasGroupArrId.push(_this.strategyArr[index].groupArr[indexGroup].groupId); //赋值

                let getId=[];
                for (var i = 0; i < _this.strategyArr[index].groupArr.length; i++) {
                      getId.push(_this.strategyArr[index].groupArr[i].groupId);
                };
                console.log('getId',getId);

                let str=getId.every(function(val){  //选中的和现有的做对比
                     return _this.hasGroupArrId.includes(val);
                })
                // let rightId=''
              
                console.log(str);
                if(str){
                    _this.strategyArr[index].checked='Y';
                    _this.getStr=_this.strategyArr[index];
                   
                    console.log("_this.getStr",_this.getStr);

                    _this.strategyArr[index]=_this.getStr;

                    // _this.$set(_this.strategyArr[index]);
                }
              
            console.log(_this.strategyArr[index]);            
            }

            console.log(_this.hasGroupArrId);
        },
        getTableData: function (currentIndex) {
            var _this = this;
            var params = {};
            this.currentIndex = 0;
            params.reportName = this.reportName;  //季报名称
            params.reportYear = this.reportYear;  //季报年度
            params.reportQuarter = this.reportQuarter;  //季报季度
            params.groupId = _this.groupId;  //关联策略组合ID
            console.log(params);
            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/getTableData.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        // _this.currentIndex = 0;
                        console.log('data=',result.data);
                        _this.tableData = result.data.body.reports;
                    } else {
                        _this.tableData = [];
                        _this.currentIndex = 0;
                        _this.showDialog('', 'info', false, result.msg);
                    }
                }
            });
        },
        // 删除
        showDel: function (item) {
            console.log(item);
            this.reportSerialNo = item.serialNo;
            this.reportType = item.reportType;
            this.showDialog('', 'delete');
        },
        del: function () {
            var params = {};
            params.reportSerialNo = this.reportSerialNo;
            params.reportType ='2';//  季报
            console.log(params);
            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/del.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        this.getTableData(0);
                        this.showDialog('delete', 'info', false, result.msg);
                    } else {
                        this.showDialog('delete', 'info', true, result.msg);
                    }
                }.bind(this)
            });
        },
        showAdd: function () {
            var _this=this;
            this.dialog.serialno = '';
            // this.dialog.groupId = '';
            // $('#groupIdListDialog').val('');
            // $('#groupIdListDialog').trigger('chosen:updated');
            // this.dialog.title = '';
            // this.dialog.content = '';

            //每次选完或者点击详情之后再点击新增-先清空
            for (var i = 0; i < _this.strategyArr.length; i++) {
                for (var j = 0; j <_this.strategyArr[i].groupArr.length; j++) {       
                    _this.strategyArr[i].groupArr[j].checked='N';     
                }; 
             };

            this.dialog.agreementPerformance='', //投顾协议履行情况 ,
            this.dialog.groups=[], //关联策略组合列表 ,
            this.dialog.marketReviewOutlook='', //市场回顾与展望 ,
            this.dialog.remark='', //备注 ,
            this.dialog.reportName='', //季报名称: ,
            this.dialog.reportQuarter='', //季报季度: = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'],
            this.dialog.reportUrl='', //季报url地址 ,
            this.dialog.reportYear='', //季报年度（YYYY) ,
            this.dialog.strategyAdjustment='', //组合策略调整情况 ,
            this.dialog.tradeExecutionBias='', //交易执行偏差情况

            this.showDialog('', 'add');
        },
        // 新增
        add: function () {
            var _this=this;
            console.log(_this.getArrId);  //全选按钮的
            console.log(_this.hasGroupArrId);  //单个选中的
           
            _this.getArrId=Array.from(new Set(_this.getArrId));  //去重
            _this.hasGroupArrId=Array.from(new Set(_this.hasGroupArrId)); //去重
            
            var params = {};
            params.agreementPerformance=this.dialog.agreementPerformance; //投顾协议履行情况 ,

            if(_this.getArrId.length>0){
            //关联策略组合列表 , 
              params.groups=Array.from(new Set(_this.getArrId.concat(_this.hasGroupArrId))) //去重
            }else{
              // params.groups=Array.from(new Set(_this.getArrId.concat(_this.hasGroupArrId)));
              params.groups=Array.from(new Set(_this.hasGroupArrId));
            } 
            params.marketReviewOutlook=this.dialog.marketReviewOutlook; //市场回顾与展望 ,
            params.remark=this.dialog.remark; //备注 ,
            params.reportName=this.dialog.reportName; //季报名称: ,
            params.reportQuarter=this.dialog.reportQuarter; //季报季度: = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'],
            params.reportUrl=this.dialog.reportUrl; //季报url地址 ,
            params.reportYear=this.dialog.reportYear; //季报年度（YYYY) ,
            params.strategyAdjustment=this.dialog.strategyAdjustment; //组合策略调整情况 ,
            params.tradeExecutionBias=this.dialog.tradeExecutionBias; //交易执行偏差情况

           console.log(params);
            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/add.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        this.getTableData(0);
                        this.showDialog('add', 'info', false, result.msg);
                    } else {
                        this.showDialog('add', 'info', true, result.msg);
                    }
                }.bind(this)
            });
        },

        // 修改
        showUpdate: function (item) {
            var _this=this;
            console.log("item",item);
            var params = {};
            //每次选完或者点击详情之后再点击新增-先清空
            for (var i = 0; i < _this.strategyArr.length; i++) {
                for (var j = 0; j <_this.strategyArr[i].groupArr.length; j++) {       
                    _this.strategyArr[i].groupArr[j].checked='N';     
                }; 
             };
            _this.reportSerialNo=item.serialNo;
            _this.getArrId=item.groups;
            params.reportSerialNo = item.serialNo;
            console.log(params);
            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/details.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        console.log(result.data)
                        this.dialog.agreementPerformance=result.data.body.agreementPerformance; //投顾协议履行情况 ,
                        this.dialog.marketReviewOutlook=result.data.body.marketReviewOutlook; //市场回顾与展望 ,
                        this.dialog.remark=result.data.body.remark; //备注 ,
                        this.dialog.reportName=result.data.body.reportName; //季报名称: ,
                        this.dialog.reportQuarter=result.data.body.reportQuarter; //季报季度: = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'],
                        this.dialog.reportUrl=result.data.body.reportUrl; //季报url地址 ,
                        this.dialog.reportYear=result.data.body.reportYear; //季报年度（YYYY) ,
                        this.dialog.strategyAdjustment=result.data.body.strategyAdjustment; //组合策略调整情况 ,
                        this.dialog.tradeExecutionBias=result.data.body.tradeExecutionBias; //交易执行偏差情况
        
                        for (var i = 0; i < _this.strategyArr.length; i++) {
                            for (var j = 0; j <_this.strategyArr[i].groupArr.length; j++) {
                                // console.log(_this.strategyArr[i].groupArr[j])
                               // console.log(result.data.body.groups.find(i=>_this.strategyArr[i].groupArr[j].groupId.includes(i)))
                                  for (var k = 0; k< result.data.body.groups.length; k++) {
                                      if(result.data.body.groups[k]===_this.strategyArr[i].groupArr[j].groupId){
                                         _this.strategyArr[i].groupArr[j].checked='Y';   
                                      }
                                  };
                            };
                           
                         }; 
                    } else {
                        this.showDialog('operate', 'info', false, result.msg);
                    }
                }.bind(this)
            });
             
            this.showDialog('', 'operate');
        },
 
        // 修改的选择项目
        // 关联策略全选反选
        checkedAllUpdate:function(index){
          var _this=this;
          // let getArrId=[];
          // _this.checkBoxIndex=index;       
    
         if(_this.strategyArr[index].checked=='Y'){
            _this.strategyArr[index].checked='N';  //取消全选按钮
            let notArr=_this.strategyArr[index].groupArr.map(function(itemGroup){
                    itemGroup.checked='N';
                return itemGroup;
            })

            if(_this.hasGroupArrId.length<0){
               _this.hasGroupArrId=[];  //这一行防止全选后有不选了，要清空
            }
            if( _this.getArrId){

            }

            // _this.hasGroupArrId=[];  //这一行防止全选后有不选了，要清空

            // 拿到groupArr里的groupId
            let that_id=[];
            _this.strategyArr[index].groupArr.forEach(function(itemGroup){
                that_id.push(itemGroup.groupId)   
            })
            
            //过滤掉取消全选后的剩下的groupId 
            let filterId=_this.getArrId.concat(that_id).filter(function(v,i,arr){
                return arr.indexOf(v)===arr.lastIndexOf(v);
            })
            console.log("filterId",filterId);
            _this.getArrId=filterId;  //赋值

            _this.strategyArr[index].groupArr=notArr;   //取消勾选全部 -不选中子菜单 

         }else{
            _this.strategyArr[index].checked='Y';  //选中全选按钮
            _this.$set(_this.strategyArr[index], 'checked', 'Y')  //点击当前的某个全选
            let hasArr=_this.strategyArr[index].groupArr.map(itemGroup=>{  //点击全选选中当前所有子项目
                itemGroup.checked='Y';
                _this.getArrId.push(itemGroup.groupId);
                return itemGroup;
             })
            _this.strategyArr[index].groupArr=hasArr;   //选中当前全部-选中子菜单-重新赋值
         }       
        console.log(_this.strategyArr[index]);
        console.log(_this.strategyArr[index].groupArr);
        console.log(_this.getArrId);
        },

        // 关联策略多选，选择多个
        changeFnUpdate(itemGroup,index,indexGroup){
            console.log(itemGroup)
            var _this=this;
     
            let allId=[];
            if(_this.strategyArr[index].groupArr[indexGroup].checked=='Y'){  //点击子项目去取消当前勾选的哪一个

                _this.strategyArr[index].groupArr[indexGroup].checked='N';

                console.log("_this.getArrId",_this.getArrId)
                console.log("_this.hasGroupArrId",_this.hasGroupArrId)

                // 去除取消勾选的id
                if(_this.getArrId.length>0){  //如果有选中全选按钮的
                    // let subId=_this.hasGroupArrId.filter(function(item) {  //取消勾选去除数组里的id
                    //   return _this.strategyArr[index].groupArr[indexGroup].groupId==item;
                    // });
                    let subId=[];
                        subId.push(_this.strategyArr[index].groupArr[indexGroup].groupId);//获取当前取消的是哪一个

                    let merge=Array.from(new Set(_this.getArrId.concat(_this.hasGroupArrId))); //去重成新数组
                    
                    console.log('subId',subId)
                    console.log('merge',merge);

                    let lastId = merge.filter(items => {   //把要取消的那个在数组中移除
                        if (!subId.includes(items)) return items;
                    })
                    console.log(lastId);

                    _this.hasGroupArrId=lastId;
                    _this.getArrId=lastId;
                    
                    // let list =Array.from(new Set(_this.getArrId)).filter(items => {
                    //     if (!subId.includes(items)) return items;
                    // })
                    // console.log("list",list);
                    // _this.hasGroupArrId=Array.from(new Set(_this.getArrId.concat(subId)));

                }else{   //没有选中全选按钮的
                    let id=_this.hasGroupArrId.filter(function(item) {  //取消勾选去除数组里的id
                      return _this.strategyArr[index].groupArr[indexGroup].groupId!==item;
                    }); 
                    console.log("id===",id);
                    _this.hasGroupArrId=id;  //直接赋值
                }
                
                for (var i = 0; i < _this.strategyArr[index].groupArr.length; i++) {
                  allId.push(_this.strategyArr[index].groupArr[i].groupId);
                };
                // console.log('allId',allId);
                let strId=allId.every(function(val){  //选中的和现有的做对比
                     return _this.hasGroupArrId.includes(val);
                })

                console.log(strId);

                if(strId==false){
                    // console.log(_this.strategyArr);
                   
                    _this.strategyArr[index].checked='N';

                    _this.getStr=_this.strategyArr[index];

                    _this.strategyArr[index]=_this.getStr;


                    _this.$set(_this.strategyArr[index]);

                    _this.$set(_this.strategyArr);
                }
                     
            }else{  //点击子项目去勾选
            _this.strategyArr[index].groupArr[indexGroup].checked='Y' //勾选
            
            // 选中哪一个赋值哪一个
            _this.hasGroupArrId.push(_this.strategyArr[index].groupArr[indexGroup].groupId); //赋值

                let getId=[];
                for (var i = 0; i < _this.strategyArr[index].groupArr.length; i++) {
                      getId.push(_this.strategyArr[index].groupArr[i].groupId);
                };
                console.log('getId',getId);

                let str=getId.every(function(val){  //选中的和现有的做对比
                     return _this.hasGroupArrId.includes(val);
                })
                // let rightId=''
              
                console.log(str);
                if(str){
                    _this.strategyArr[index].checked='Y';
                    _this.getStr=_this.strategyArr[index];
                   
                    console.log("_this.getStr",_this.getStr);

                    _this.strategyArr[index]=_this.getStr;

                    _this.$set(_this.strategyArr[index]);
                }
              
            console.log(_this.strategyArr[index]);            
            }

            console.log(_this.hasGroupArrId);
        }, 

        operate: function () {
            var _this=this;
            console.log(_this.getArrId);  //全选按钮的
            console.log(_this.hasGroupArrId);  //单个选中的
           
            _this.getArrId=Array.from(new Set(_this.getArrId));  //去重
            _this.hasGroupArrId=Array.from(new Set(_this.hasGroupArrId)); //去重
            
            var params = {};
            params.agreementPerformance=this.dialog.agreementPerformance; //投顾协议履行情况 ,

            if(_this.getArrId.length>0){
            //关联策略组合列表 , 
              params.groups=Array.from(new Set(_this.getArrId.concat(_this.hasGroupArrId))) //去重
            }else{
              // params.groups=Array.from(new Set(_this.getArrId.concat(_this.hasGroupArrId)));            
              params.groups=Array.from(new Set(_this.hasGroupArrId));
            } 
            
            // 先保留注释的这一段代码--预防以后用
            // var groupIdArr = []
            // var strArr=[];
            // strArr=params.groups;
            // for (var key in params.groups) {
            //     if (params.groups[key].indexOf("_") !== -1) {
            //         console.log(params.groups[key]);
            //         groupIdArr = groupIdArr.concat(params.groups[key].split('_')[0]);
            //         console.log(groupIdArr);  ]
            //     }
            // }
            // let newArr=groupIdArr.concat(strArr)
            // let filterNewarr=arrs.filter(function(item) {
            //     return item.indexOf("_")==-1;
            // });
            //先保留注释的这一段代码
           
            params.marketReviewOutlook=this.dialog.marketReviewOutlook; //市场回顾与展望 ,
            params.remark=this.dialog.remark; //备注 ,
            params.reportName=this.dialog.reportName; //季报名称: ,
            params.reportQuarter=this.dialog.reportQuarter; //季报季度: = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'],
            params.reportUrl=this.dialog.reportUrl; //季报url地址 ,
            params.reportYear=this.dialog.reportYear; //季报年度（YYYY) ,
            params.strategyAdjustment=this.dialog.strategyAdjustment; //组合策略调整情况 ,
            params.tradeExecutionBias=this.dialog.tradeExecutionBias; //交易执行偏差情况
            params.serialNo=this.reportSerialNo;
           console.log(params);
            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/operate.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        this.getTableData(0);
                        this.showDialog('operate', 'info', false, result.msg);
                    } else {
                        this.showDialog('operate', 'info', false, result.msg);
                    }
                }.bind(this)
            });
        },

        // 详情
        getDetails:function(item){
            var _this=this;
            var params = {};
            params.reportSerialNo = item.serialNo;
            console.log(params);
            $.post({
                url: '/investmentMgmt/investmentInformationDisclosure/quarterlyReport/details.ajax',
                data: params,
                success: function (result) {
                    if (result.error === 0) {
                        console.log(result.data)
                        this.dialog.agreementPerformance=result.data.body.agreementPerformance; //投顾协议履行情况 ,
                        this.dialog.marketReviewOutlook=result.data.body.marketReviewOutlook; //市场回顾与展望 ,
                        this.dialog.remark=result.data.body.remark; //备注 ,
                        this.dialog.reportName=result.data.body.reportName; //季报名称: ,
                        this.dialog.reportQuarter=result.data.body.reportQuarter; //季报季度: = ['FIRST', 'SECOND', 'THIRD', 'FOURTH'],
                        this.dialog.reportUrl=result.data.body.reportUrl; //季报url地址 ,
                        this.dialog.reportYear=result.data.body.reportYear; //季报年度（YYYY) ,
                        this.dialog.strategyAdjustment=result.data.body.strategyAdjustment; //组合策略调整情况 ,
                        this.dialog.tradeExecutionBias=result.data.body.tradeExecutionBias; //交易执行偏差情况
                        for (var i = 0; i < _this.strategyArr.length; i++) {
                            for (var j = 0; j <_this.strategyArr[i].groupArr.length; j++) {
                                // console.log(_this.strategyArr[i].groupArr[j])
                               // console.log(result.data.body.groups.find(i=>_this.strategyArr[i].groupArr[j].groupId.includes(i)))
                                  for (var k = 0; k< result.data.body.groups.length; k++) {
                                      if(result.data.body.groups[k]===_this.strategyArr[i].groupArr[j].groupId){
                                         _this.strategyArr[i].groupArr[j].checked='Y';   
                                      }
                                  };
                            };
                           
                         }; 
                    } else {
                        this.showDialog('details', 'info', false, result.msg);
                    }
                }.bind(this)
            });
            this.showDialog('', 'details');
        },
        
        //主表格分页方法
        prev: function () {
            if (this.currentIndex <= 0) {
                return;
            }
            this.getTableData(this.currentIndex - 1);
        },
        next: function () {
            if (this.currentIndex >= this.totalPage - 1) {
                return;
            }
            this.getTableData(this.currentIndex + 1);
        },
        changeIndex: function (index) {
            this.getTableData(index - 1);
        },
        toFirst: function () {
            this.getTableData(0);
        },
        toLast: function () {
            this.getTableData(this.totalPage - 1);
        },
        //公共方法
        showDialog: function (dia1, dia2, callback, msg) {
            if (msg) {
                this.diaMsg = msg;
            } else {
                msg = '输入条件错误';
            }
            if (!dia1) {
                $('#' + dia2).modal('show');
            } else if (!dia2) {
                $('#' + dia1).modal('hide');
            } else if (!callback) {
                $('#' + dia1).on("hidden.bs.modal", function () {
                    $('#' + dia2).modal('show');
                    $('#' + dia1).off().on("hidden", "hidden.bs.modal");
                });
                $('#' + dia1).modal('hide');
            } else {
                $('#' + dia1).on("hidden.bs.modal", function () {
                    $('#' + dia2).on("hidden.bs.modal", function () {
                        $('#' + dia1).modal("show");
                        $('#' + dia2).off().on("hidden", "hidden.bs.modal");
                    });
                    $('#' + dia2).modal("show");
                    $('#' + dia1).off().on("hidden", "hidden.bs.modal");
                });
                $('#' + dia1).modal('hide');
            }
        }
    },
    components: {
        'date-picker': VueBootstrapDatetimePicker
    },
});