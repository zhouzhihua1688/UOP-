const request = require('../../../local_data/requestWrapper');
const apiUrlList = require('../apiConfig').auditMgmt.idCardHandle;
const request_obs = require('../../../local_data/request_obs');
const pool = require('../apiConfig').mysqlPool;
const tableName = 'mc_adm_idcard';
module.exports = function (app) {
    // 获取服务端列表
    app.post('/messageCenter/auditMgmt/idCardHandle/getList.ajax', (req, res, next) => {
        // 获取服务端列表
        function getList() {
            return new Promise((resolve, reject) => {
                let params = req.body;
                let option = {
                    session: req.session,
                    url: apiUrlList.getServerList,
                    body: params,
                    timeout: 15000,
                    json: true
                };
                console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax option:', option);
                request.post(option, (error, response, body) => {
                    console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax error:', error);
                    console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax statusCode:', response && response.statusCode);
                    console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax body:', body);
                    if (error) {
                        reject({message: '数据获取失败'});
                    }
                    if (body && body.returnCode == 0 && Array.isArray(body.body.apps)) {
                        let data = body.body;
                        data.userId = req.session.loginInfo.userid;
                        data.pages = Math.ceil(data.total / params.pageSize);//最大页码
                        data.pageNum = params.pageNo;//当前页
                        resolve(data);
                    }
                    else if (body && body.returnCode != 9999) {
                        reject({message: body.returnMsg});
                    }
                    else {
                        reject({message: '查询失败'});
                    }
                });
            });
        }

        // 获取本地service_id列表
        function getLocalserviceIdList() {
            return new Promise(resolve => {
                pool.getConnection((error, connection) => {
                    if (error) {
                        console.log('/messageCenter/auditMgmt/idCardHandle/getLocalserviceIdList.ajax 链接本地数据库失败', error.message);
                        return resolve();
                    }
                    let SQL = `SELECT service_id,json_unquote(content->'$.serialNo') as content_id FROM ${tableName} WHERE delete_flag='F'`;
                    SQL += ` AND status='1'`;
                    console.log('/messageCenter/auditMgmt/idCardHandle/getLocalserviceIdList.ajax run SQL: ', SQL);
                    connection.query(SQL, function (error, results) {
                        console.log('/messageCenter/auditMgmt/idCardHandle/getLocalserviceIdList.ajax run SQL error', error);
                        console.log('/messageCenter/auditMgmt/idCardHandle/getLocalserviceIdList.ajax run SQL results:', results);
                        connection.release();
                        if (error) {
                            return resolve();
                        }
                        let data = Array.from(results).map(item => item.service_id || item.content_id);
                        resolve(data);
                    });
                });
            });
        }

        // 获取翻译字段
        function getTranslate() {
            return new Promise((resolve, reject) => {
                let params = {pmst: 'ICIF', pmkey: 'ACCPTMD'};
                let option = {
                    session: req.session,
                    url: apiUrlList.getTranslate,
                    qs: params,
                    timeout: 15000,
                    json: true
                };
                console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax --getTranslate option:', option);
                request(option, (error, response, body) => {
                    console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax --getTranslate error:', error);
                    console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax --getTranslate statusCode:', response && response.statusCode);
                    console.log('/messageCenter/auditMgmt/idCardHandle/getList.ajax --getTranslate body:', body);
                    if (error) {
                        return resolve()
                    }
                    if (body && body.returnCode == 0 && Array.isArray(body.body)) {
                        let data = body.body;
                        resolve(data);
                    }
                    else if (body && body.returnCode != 9999) {
                        return resolve()
                    }
                    else {
                        return resolve()
                    }
                });
            });
        }

        Promise.all([getList(), getTranslate(), getLocalserviceIdList()]).then(([list, ts, serviceIdList]) => {
            list.apps.forEach(function (item) {
                //带复核状态，showOperate新字段加入，以判断服务端至经办的操作显示，false则为不显示操作
                item.showOperateStatus = false;
                item.imgData = '图片获取中...';
                if (ts && Array.isArray(ts)) {
                    for (let translateCashFrom of ts) {
                        if (item.accptMd == translateCashFrom.pmco) {
                            item.accptMdTs = translateCashFrom.pmnm;
                            break;
                        }
                    }
                }
                if (serviceIdList && Array.isArray(serviceIdList)) {
                    if (!serviceIdList.includes(item.serialNo)) {
                        item.showOperateStatus = true;
                    }
                }
            });
            res.send({error: 0, msg: '数据请求成功', data: list});
        }).catch(error => {
            res.send({error: 1, msg: error.message, data: null});
        });
    });
    // 获取图片base64
    app.post('/messageCenter/auditMgmt/idCardHandle/getBase64.ajax', (req, res, next) => {
        let getImageByCustAttchmnt = custAttchmntItem => {
            return new Promise(((resolve, reject) => {
                if (!custAttchmntItem) {
                    return resolve();
                }
                let option = {
                    body: {
                        container: custAttchmntItem.filePath,
                        objectName: custAttchmntItem.fileName
                    }
                };
                request_obs(option).then(body => {
                    body.on('response', function (response) {
                        if (response.statusCode !== 200) {
                            console.log(response.statusCode, '------response.statusCode -----');
                            resolve();
                        }
                        else {
                            let chunks = [];
                            body.on('data', function (chunk) {
                                chunks.push(chunk);
                            });
                            body.on('end', function (err) {
                                let data = Buffer.concat(chunks);
                                resolve(data.toString('base64'));
                            });
                        }
                    });
                }).catch(error => {
                    console.log(error, '--------error.message-------');
                    resolve();
                });
            }));
        };
        Promise.all(JSON.parse(req.body.imageInfo).map(custAttchmntItem => getImageByCustAttchmnt(custAttchmntItem))).then(imageArr => {
            imageArr = imageArr.every(value => value) ? imageArr : '图片获取失败';
            res.send({error: 0, msg: '请求成功', data: imageArr});
        }).catch(error => {
            console.log('/messageCenter/auditMgmt/idCardHandle/getBase64.ajax error:', error);
            res.send({error: 1, msg: '请求失败', data: '图片获取失败'});
        });
    });
    //服务端审核操作落本地数据
    app.post('/messageCenter/auditMgmt/idCardHandle/serviceToLocalUpdate.ajax', (req, res, next) => {
        pool.getConnection((error, connection) => {
            if (error) {
                console.log('/messageCenter/auditMgmt/idCardHandle/serviceToLocalUpdate.ajax 链接本地数据库失败:', error.message);
                return res.send({error: 1, msg: '链接本地数据库失败', data: null});
            }
            let serialNo = req.body.serialNo;
            let content = req.body.content;
            let setOperate = req.body.setOperate;
            let necessaryRemark = req.body.necessaryRemark;
            let creator = req.session.loginInfo.userid;
            let operator = req.session.loginInfo.userid;
            let SQL = `INSERT INTO ${tableName} (service_id,content,creator,operator,operate,necessary_remark,status) VALUES ('${serialNo}','${content}','${creator}','${operator}','${setOperate}','${necessaryRemark}',1)`;
            console.log('/messageCenter/auditMgmt/idCardHandle/serviceToLocalUpdate.ajax run business SQL: ', SQL);
            connection.query(SQL, (error, results) => {
                console.log('/messageCenter/auditMgmt/idCardHandle/serviceToLocalUpdate.ajax run business SQL error:', error);
                console.log('/messageCenter/auditMgmt/idCardHandle/serviceToLocalUpdate.ajax run business SQL results:', results);
                connection.release();
                if (error) {
                    return res.send({error: 1, msg: error.message, data: null});
                }
                res.send({error: 0, msg: '调用成功', data: null});
            });
        });
    });
    //拉取本地数据
    app.post('/messageCenter/auditMgmt/idCardHandle/getLocalList.ajax', (req, res, next) => {
        pool.getConnection((error, connection) => {
            if (error) {
                console.log('/messageCenter/auditMgmt/idCardHandle/getLocalList.ajax 链接本地数据库失败', error.message);
                return res.send({error: 1, msg: '链接本地数据库失败', data: null});
            }
            let SQL = `SELECT * FROM ${tableName} WHERE delete_flag='F'`;
            if (req.body.custNo) {
                SQL += ` AND JSON_EXTRACT(content, '$.custNo')='${req.body.custNo}'`;
            }
            if (req.body.invNm) {
                SQL += ` AND JSON_EXTRACT(content, '$.invNm')='${req.body.invNm}'`;
            }
            if (req.body.idTp) {
                SQL += ` AND JSON_EXTRACT(content, '$.idTp')='${req.body.idTp}'`;
            }
            if (req.body.operate) {
                SQL += ` AND operate='${req.body.operate}'`;
            }
            if (req.body.status) {
                SQL += ` AND status='${req.body.status}'`;
            }
            SQL += ' ORDER BY update_timestamp DESC';
            console.log('/messageCenter/auditMgmt/idCardHandle/getLocalList.ajax run SQL:', SQL);
            connection.query(SQL, function (error, results) {
                console.log('/messageCenter/auditMgmt/idCardHandle/getLocalList.ajax run SQL error', error);
                connection.release();
                if (error) {
                    return res.send({error: 1, msg: '运行SQL语句失败', data: null});
                }
                let user = req.session.loginInfo.userid;
                let data = Array.from(results);
                let start = (req.body.pageNo - 1) * req.body.pageSize;
                let end = start + req.body.pageSize;
                let useData = data.slice(start, end).map((item) => {
                    let obj = {
                        local_id: item.local_id,
                        creator: item.creator,
                        operator: item.operator,
                        createTime: formatTimeStamp(item.create_timestamp),
                        updateTime: formatTimeStamp(item.update_timestamp),
                        operate: item.operate,
                        status: item.status,
                        reviewer: item.reviewer,
                        reviewTime: item.review_time,
                        remark: item.remark,
                        necessaryRemark :item.necessary_remark
                    };
                    if (item.creator == user || user == 'admin') {
                        obj.showButton = true;
                    }
                    else {
                        obj.showButton = false;
                    }
                    if (obj.status == 0) {
                        obj.showStatus = '复核通过';
                    }
                    else if (obj.status == 1) {
                        obj.showStatus = '待复核';
                    }
                    else if (obj.status == 9) {
                        obj.showStatus = '复核驳回';
                    }
                    else {
                        obj.showStatus = obj.status;
                    }
                    if (obj.operate == 1) {
                        obj.showOperate = '审核通过';
                    }
                    else if (obj.operate == 2) {
                        obj.showOperate = '审核拒绝';
                    }
                    else {
                        obj.showOperate = obj.operate;
                    }
                    let content = JSON.parse(item.content);
                    obj.custNo = content.custNo;
                    obj.invNm = content.invNm;
                    obj.idTp = content.idTp;
                    obj.idTpName = content.idTpName;
                    obj.idNo = content.idNo;
                    obj.idValiDate = content.idValiDate;
                    obj.custAttchmnt = content.custAttchmnt || [];
                    //身份证图片信息
                    obj.imgData = content.imgData ? content.imgData : '图片获取中...';
                    obj.accptMd = content.accptMd;
                    obj.accptMdTs = content.accptMdTs;
                    obj.serialNo = content.serialNo;
                    return obj;
                });
                let total = data.length;
                let pages = Math.ceil(total / req.body.pageSize); //最大页码
                let pageNum = req.body.pageNo; //当前页
                let useData_for_log = useData.filter(item => !Array.isArray(item.imgData));
                console.log('/messageCenter/auditMgmt/idCardHandle/getLocalList.ajax run SQL results:', useData_for_log);
                res.send({error: 0, msg: '调用成功', data: {useData, user, total, pages, pageNum}});
            });
        });
    });
    //删除本地数据
    app.post('/messageCenter/auditMgmt/idCardHandle/revertLocalData.ajax', (req, res, next) => {
        pool.getConnection(function (error, connection) {
            if (error) {
                console.log('/messageCenter/auditMgmt/idCardHandle/revertLocalData.ajax  链接本地数据库失败', error.message);
                return res.send({error: 1, msg: '链接本地数据库失败', data: null});
            }
            let {local_id, updateTime} = req.body;
            let SQL = `UPDATE ${tableName} SET delete_flag='T',operator='${req.session.loginInfo.userid}' WHERE local_id=${local_id} AND update_timestamp='${updateTime}'`;
            console.log('/messageCenter/auditMgmt/idCardHandle/revertLocalData.ajax run messageCenter SQL: ', SQL);
            connection.query(SQL, function (error, results) {
                console.log('/messageCenter/auditMgmt/idCardHandle/revertLocalData.ajax run messageCenter SQL error:', error);
                console.log('/messageCenter/auditMgmt/idCardHandle/revertLocalData.ajax run messageCenter SQL results:', results);
                connection.release();
                if (error) {
                    return res.send({error: 1, msg: error.message, data: null});
                }
                if (results.changedRows) {
                    res.send({error: 0, msg: '调用成功', data: null});
                }
                else {
                    res.send({error: 1, msg: '数据不存在或已更新,请刷新页面', data: null});
                }
            });
        });
    });
};

function formatTimeStamp(timestamp) {
    let d = new Date(timestamp);
    let fixZero = function (num) {
        return num < 10 ? '0' + num : num;
    };
    return [d.getFullYear(), d.getMonth() + 1, d.getDate()].map(value => fixZero(value)).join('-') +
        ' ' + [d.getHours(), d.getMinutes(), d.getSeconds()].map(value => fixZero(value)).join(':');
}