const request = require('request');
const obs_config = global.envConfig.obs;
const obs_group = {
	keyStoneName: 'newecc',
	keyStonePassword: 'newecc',
	container: 'groupReport'
}

function requestGroup_obs(uri, options, callback) {
	return new Promise((resolve, reject) => {
		let origin_option = request.initParams(uri, options, callback);
		// 未传objectName
		if (!origin_option.body || !origin_option.body.objectName) {
			reject({
				message: '未传objectName'
			});
		}
		const token_uri = (origin_option.url || origin_option.uri) || obs_config.keyStoneUrl;
		const domain = origin_option.body.domain || obs_config.domain;
		const projectId = origin_option.body.projectId || obs_config.projectId;
		const swiftUrl = origin_option.body.swiftUrl || obs_config.swiftUrl;
		const keyStoneName = origin_option.body.keyStoneName || obs_group.keyStoneName;
		const keyStonePassword = origin_option.body.keyStonePassword || obs_group.keyStonePassword;
		const container = origin_option.body.container || obs_group.container;
		const objectName = origin_option.body.objectName;

		let option_for_token = {};
		option_for_token.uri = token_uri;
		option_for_token.body = {
			auth: {
				identity: {
					methods: ['password'],
					password: {
						user: {
							name: keyStoneName,
							domain: {
								id: domain
							},
							password: keyStonePassword
						}
					}
				},
				scope: {
					project: {
						id: projectId
					}
				}
			}
		};
		option_for_token.json = true;
		// console.log('option_for_token:', JSON.stringify(option_for_token));
		request.post(option_for_token, (error, response, body) => {
			// console.log('option_for_token error:', error);
			// console.log('option_for_token statusCode:', response && response.statusCode);
			// console.log('option_for_token body:', body);
			if (error) {
				reject({
					message: '获取token出错'
				});
			}
			// 获取token成功(success or created)
			if ((response.statusCode == 200 || response.statusCode == 201) && response.headers['x-subject-token']) {
				resolve({
					url: `${swiftUrl}/AUTH_${projectId}/${container}/${encodeURIComponent(objectName)}`,
					token: response.headers['x-subject-token']
				});
			} else {
				reject({
					message: '获取token出错'
				});
			}
		});
	});
}

// function verbFunc(verb) {
//     let method = verb.toUpperCase();
//     return function (uri, options, callback) {
//         let params = request.initParams(uri, options, callback);
//         params.method = method;
//         return request_obs(params, params.callback);
//     }
// }
//
// request_obs.get = verbFunc('get');
// request_obs.head = verbFunc('head');
// request_obs.options = verbFunc('options');
// request_obs.post = verbFunc('post');
// request_obs.put = verbFunc('put');
// request_obs.patch = verbFunc('patch');
// request_obs.del = verbFunc('delete');
// request_obs['delete'] = verbFunc('delete');

module.exports = requestGroup_obs;
