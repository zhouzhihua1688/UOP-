Vue.use(window['vue-cropper']);
Vue.component('selectChosen2', {
	template: `
			<select class="chosen-select form-control" ref="sele">
					<option value="">请选择</option>
					<option v-if="modeType=='1'" :value="item[keyList[0]]+','+item[keyList[1]]" v-for="item in list">{{'一级:'+item[keyList[0]]+'&nbsp;/&nbsp;二级:'+item[keyList[1]]}}</option>
			</select>
			`,
	model: {
		prop: "value",
		event: "change",
	},
	props: {
		value: {
			validator: () => true,
		},
		list: {
			type: [Object, Array],
			default: () => [],
		},
		width: String,
		keyList: {
			type: Array,
			default: () => [],
		},
		modeType: {
			type: String,
			default: '1'
		}
	},
	watch: {
		value: function () {
			$(this.$refs.sele).val(this.value);
			$(this.$refs.sele).trigger("chosen:updated");
		}
	},
	mounted() {
		console.log(this.list);
		$(this.$refs.sele).chosen({
			search_contains: true,
			no_results_text: '未找到',
			disable_search_threshold: 6,
			width: this.width || '138px'
		});
		$(this.$refs.sele).on('change', function (e, params) {
			this.$emit('change', params ? params.selected : '')
		}.bind(this));
	},
	updated() {
		$(this.$refs.sele).trigger("chosen:updated");
	},
})
new Vue({
	el: '#content',
	data: function () {
		return {
			tableData: [],
			productData: [],
			currentIndex: 0,
			maxSpace: 5,
			totalPage: 0,
			pageMaxNum: 10,
			diaMsg: '',
			loadingShow: false, //loading动画
			showText: '数据加载中...',
			// vue-cropper的配置项
			option: {
				img: '',
				size: 1,
				full: false,
				outputType: 'png',
				canMove: true,
				fixedBox: true,
				original: false,
				canMoveBox: true,
				autoCrop: true,
				// 只有自动截图开启 宽度高度才生效
				autoCropWidth: 250,
				autoCropHeight: 200,
				centerBox: false,
				high: true,
				max: 99999
			},
			previews: {}, //剪切预览
			limitSize: 100, //compress压缩文件的最大kb
			//主页面所用字段
			// 搜索条件
			search: {

			},
			allChecked: {
				'checked': true
			}, //全部
			menuList: [{
					'name': '定投',
					'checked': true
				},
				{
					'name': '债基',
					'checked': true
				}, {
					'name': 'FOF',
					'checked': true
				},
				{
					'name': '回收+',
					'checked': true
				}, {
					'name': '其他',
					'checked': true
				}
			], //单个标签
			modifyStatus: '0',

			// 新增修改弹窗字段
			// 新增修改产品数据
			productDataOperate: {

			},
			// 物料信息数据的新增与修改
			materialInfoOperate: {

			},
			
		}
	},
	mounted: function () {
		var dialogs = ['info', 'del', 'batchOperation'];
		dialogs.forEach(function (id) {
			$('#' + id).on('shown.bs.modal', function () {
				var $this = $(this);
				var dialog = $this.find('.modal-dialog');
				var top = ($(window).height() - dialog.height()) / 2;
				dialog.css({
					marginTop: top
				});
			});
		});

		// this.getTableData(0);
	},
	computed: {
		pageList: function () {
			var arr = [];
			if (this.totalPage <= 2 * this.maxSpace) {
				for (var i = 0; i < this.totalPage; i++) {
					arr.push(i + 1);
				}
				return arr;
			}
			if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
				for (var i = this.currentIndex - this.maxSpace; i < this.currentIndex + this.maxSpace; i++) {
					arr.push(i + 1);
				}
			} else if (this.currentIndex <= this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
				for (var i = 0; i < this.currentIndex + (2 * this.maxSpace - this.currentIndex); i++) {
					arr.push(i + 1);
				}
			} else if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex <= this.maxSpace) {
				var space = this.totalPage - this.currentIndex;
				for (var i = this.currentIndex - (2 * this.maxSpace - space); i < this.totalPage; i++) {
					arr.push(i + 1);
				}
			} else {
				for (var i = 0; i < this.totalPage; i++) {
					arr.push(i + 1);
				}
			}
			return arr;
		},
	},
	watch: {
		pageMaxNum: function () {
			this.getTableData(0);
		},
	},
	methods: {
		// 切换主页面menuList背景颜色--选择标签
		// 全选按钮
		checkAll($event) {
			// return;
			$event.preventDefault();
			this.allChecked.checked = !this.allChecked.checked;
			for (p in this.menuList) {
				this.menuList[p].checked = this.allChecked.checked;
			}
		},
		// 点击单个标签点击选中
		checkSingle: function ($event, index) {
			$event.preventDefault();
			// this.bgIndex = index;   //背景索引
			this.menuList[index].checked = !this.menuList[index].checked;
			let checkAllFlag = true;
			for (p in this.menuList) {
				if (p == 'checked') continue;
				if (!this.menuList[p].checked) {
					// 有一个没有选中，则全选也不选中
					checkAllFlag = false;
					break
				}
			}
			this.allChecked.checked = checkAllFlag;
		},
		// 主表格数据
		getTableData: function (currentIndex) {
			//   console.log(currentIndex);
			var _this = this;
			var params = {};
			params.userType = this.roleId; //用户类型
			if (this.channelSubData) {
				params.channel = this.channelData + '-' + this.channelSubData; //一级加二级渠道
			} else {
				params.channel = this.channelData; //一级渠道
			}
			params.searchMaterial = this.searchMaterial; //访问内容
			params.searchName = this.searchName; //姓名
			params.startTime = this.startTime;
			params.endTime = this.endTime;
			params.page = currentIndex + 1;
			params.size = this.pageMaxNum;
			console.log(params);
			$(".cover").show();
			_this.tableData = [];
			$.post({
				url: '/contentMgmt/productMaterial/investPrefecture/getTableData.ajax',
				data: params,
				success: function (result) {
					$(".cover").hide();
					if (result.error === 0) {
						_this.currentIndex = currentIndex;
						_this.totalPage = Math.ceil(result.data.body.total / params.size);
						if (result.data.body.data) {
							_this.tableData = result.data.body.data ? result.data.body.data : [];
						} else {
							_this.showText = '暂无数据';
						}
					} else {
						$(".cover").hide();
						_this.tableData = [];
						_this.showText = '暂无数据';
						_this.currentIndex = 0;
						_this.showDialog('', 'info', false, result.msg);
					}
				}
			});

		},
		// 新增修改弹窗
		showAdd: function () {
			this.modifyStatus = 0; //弹出新增弹窗
			this.showDialog('', 'add');
		},
		showMaterialInfo: function () {
			this.showDialog('add', 'materialInfoAdd', true);
		},
		// 批量操作
		showBatchOperation: function () {
			this.showDialog('', 'batchOperation', false)
		},
		confirmBatchOperation: function () {

		},
		// 本地图片上传
		uploadImg(e) {
			//上传图片
			// this.option.img
			var file = e.target.files[0];
			this.fileName = file.name;
			this.shareCoverImage = ''; //这里是用作删除图片，每次点击先隐藏按钮
			console.log("fileName===", this.fileName);
			if (!/\.(gif|jpg|jpeg|png|bmp|GIF|JPG|PNG)$/.test(e.target.value)) {
				alert('图片类型必须是.gif,jpeg,jpg,png,bmp中的一种')
				return false
			}
			var reader = new FileReader()
			reader.onload = (e) => {
				let data
				if (typeof e.target.result === 'object') {
					// 把Array Buffer转化为blob 如果是base64不需要
					data = window.URL.createObjectURL(new Blob([e.target.result]))
				} else {
					data = e.target.result
				}
				this.option.img = data
				$('#uploads').attr('type', 'text'); //解决不能重复添加问题-先变成text
			}
			// 转化为base64
			// reader.readAsDataURL(file)
			// 转化为blob
			reader.readAsArrayBuffer(file)
		},
		uploadForServer() {
			// 输出裁剪过的blob
			var _this = this;
			this.$refs.cropper.getCropBlob(async (data) => {
				let [error, res] = await this.awaitWrap(compress(data, this.limitSize)); //获得压缩过的blob
				if (error) {
					console.log(error);
					return
				}
				console.log('res', res);
				var formdata = new FormData();

				let file = new File([res.compressFile], this.fileName);
				console.log(file);
				if (!file.name) {
					_this.showDialog('add', 'info', true, '请选择要上传的图片!');
					return false;
				}

				console.log(file.name);

				formdata.append('file', file);
				this.loadingShow=true;
				$.post({
					url: '/advertising/productMaterialMgmt/productList/uploadImg.ajax',
					cache: false,
					data: formdata,
					processData: false,
					contentType: false,
					success: function (result) {
						if (result.error === 0) {
							this.loadingShow=false;
							$('#uploads').attr('type', 'file'); //解决不能重复添加问题-再变成File
							this.shareCoverImage = result.data.imageUrl;
							this.showDialog('add', 'info', true, result.msg);
						} else {
							this.showDialog('add', 'info', true, result.msg);
						}
					}.bind(this)
				});
			})
		},
		// 删除图片-这一步是删除已经上传了的图片
		delFile() {
			//删除图片按钮置空图片和预览
			this.option.img = '';
			this.shareCoverImage = '';
		},
		// 实时预览函数
		realTime(data) {
			this.previews = data
			// console.log(data)
		},

		//主表格分页方法
		prev: function () {
			if (this.currentIndex <= 0) {
				return;
			}
			this.getTableData1(this.currentIndex - 1);
		},
		next: function () {
			if (this.currentIndex >= this.totalPage - 1) {
				return;
			}
			this.getTableData1(this.currentIndex + 1);
		},
		changeIndex: function (index) {
			this.getTableData1(index - 1);
		},
		toFirst: function () {
			this.getTableData1(0);
		},
		toLast: function () {
			this.getTableData1(this.totalPage - 1);
		},
		showDialog: function (dia1, dia2, callback, msg) {
			if (msg) {
				this.diaMsg = msg;
			} else {
				msg = '输入条件错误';
			}
			if (!dia1) {
				$('#' + dia2).modal('show');
			} else if (!dia2) {
				$('#' + dia1).modal('hide');
			} else if (!callback) {
				$('#' + dia1).on("hidden.bs.modal", function () {
					$('#' + dia2).modal('show');
					$('#' + dia1).off().on("hidden", "hidden.bs.modal");
				});
				$('#' + dia1).modal('hide');
			} else {
				$('#' + dia1).on("hidden.bs.modal", function () {
					$('#' + dia2).on("hidden.bs.modal", function () {
						$('#' + dia1).modal("show");
						$('#' + dia2).off().on("hidden", "hidden.bs.modal");
					});
					$('#' + dia2).modal("show");
					$('#' + dia1).off().on("hidden", "hidden.bs.modal");
				});
				$('#' + dia1).modal('hide');
			}
		},
		showNestDialog: function (dia1, dia2, dia3, callback, msg) { //页面内嵌套了多个模态框
			if (msg) {
				this.diaMsg = msg;
			} else {
				msg = '输入条件错误';
			}
			if (!dia1) {
				$('#' + dia2).modal('show');
			} else if (!dia2) {
				$('#' + dia1).modal('hide');
			} else if (!callback) {
				$('#' + dia1).on("hidden.bs.modal", function () {
					$('#' + dia2).modal('show');
					$('#' + dia1).off().on("hidden", "hidden.bs.modal");
				});
				$('#' + dia1).modal('hide');
			} else {
				$('#' + dia1).on("hidden.bs.modal", function () {
					$('#' + dia2).on("hidden.bs.modal", function () {
						$('#' + dia1).modal("show");
						$('#' + dia2).off().on("hidden", "hidden.bs.modal");
						$('#' + dia1).on("hidden.bs.modal", function () {
							$('#' + dia3).modal('show');
							$('#' + dia1).off().on("hidden", "hidden.bs.modal");
						});
					});
					$('#' + dia2).modal("show");
					$('#' + dia1).off().on("hidden", "hidden.bs.modal");
				});
				$('#' + dia1).modal('hide');
			}
		},
		awaitWrap(promise) { // await 异常处理包装
			return promise.then(res => [null, res], error => [error, null]);
		},
		transformTime(createTime) {
			let date = new Date(Number(createTime));
			let year = date.getFullYear();
			let month = date.getMonth() + 1;
			let day = date.getDate();
			let h = date.getHours()
			let i = date.getMinutes()
			let s = date.getSeconds();
			month = month < 10 ? '0' + month : month;
			day = day < 10 ? '0' + day : day;
			if (h < 10) {
				h = '0' + h;
			}
			if (i < 10) {
				i = '0' + i;
			}
			if (s < 10) {
				s = '0' + s;
			}
			let dateT = year + '-' + month + '-' + day + " " + h + ':' + i + ':' + s
			return dateT
		}
	},
	components: {
		'date-picker': VueBootstrapDatetimePicker
	},
});