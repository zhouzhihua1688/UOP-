let messageCenter = global.envConfig.messageCenter ? global.envConfig.messageCenter : global.envConfig.inner_gateway;
let messageCenterMss = global.envConfig.messageCenter_group ? global.envConfig.messageCenter_group : global.envConfig.inner_gateway;
let messageCenterToken = global.envConfig.messageCenter_token ? global.envConfig.messageCenter_token : global.envConfig.inner_gateway;
let sfs = global.envConfig.sfs ? global.envConfig.sfs : global.envConfig.inner_gateway;
let icif = global.envConfig.icif ? global.envConfig.icif : global.envConfig.inner_gateway;
let userGroup = global.envConfig.userGroup ? global.envConfig.userGroup : global.envConfig.inner_gateway;
let scp = global.envConfig.scp ? global.envConfig.scp : global.envConfig.inner_gateway;
let CS = global.envConfig.CS ? global.envConfig.CS : global.envConfig.inner_gateway;
let messageCenterBlackList = global.envConfig.messageCenter_blackList ? global.envConfig.messageCenter_blackList : global.envConfig.inner_gateway;
messageCenter += '/message-center/v1';
messageCenterToken += '/message-center-api/v1';
sfs += '/sfs/admin/v1';
icif += '/icif/v1';
userGroup += '/user-group/v1';
scp += '/sfs/admin/v1';
CS += '/common-services/v1';
messageCenterBlackList += '/message-center-api/v1';
const devFilePath = global.envConfig.devFilePath;
const uopStaticFilePath = global.envConfig.uopStaticFilePath;
const uopStaticFilePath_url = global.envConfig.uopStaticFilePath_url;

const messageCenterDevFilePath = global.envConfig.messageCenterFilePath ? global.envConfig.messageCenterFilePath : devFilePath + '/messageCenter';
const messageCenterExternalFilePath = uopStaticFilePath ? uopStaticFilePath + '/messageCenter' : devFilePath + '/uopStatic';
const messageCenterExternalFilePath_url = uopStaticFilePath_url ? uopStaticFilePath_url + '/messageCenter' : devFilePath + '/uopStatic';

try {
    const mysql = require('mysql');
    var mysqlPool = mysql.createPool(global.envConfig.mysqlConfig);
    // var mysqlPool = mysql.createPool({
    //     host: '10.50.115.115',
    //     database: 'uop',
    //     user: 'uop',
    //     password: 'Uop@201903_',
    // });
} catch (error) {
    console.log('mysqlPool error=', error)
}

module.exports = {
    mysqlPool,
    filePath: messageCenterDevFilePath,
    filePathExternal: messageCenterExternalFilePath,
    filePathExternal_url: messageCenterExternalFilePath_url,
    templateMgmt: {
        templateMgmt: {
            search: `${messageCenter}/messageTemplate/get`,
            query: `${messageCenter}/messageTemplate/query`,
            del: `${messageCenter}/messageTemplate/delete`,
            add: `${messageCenter}/messageTemplate/add`,
            update: `${messageCenter}/messageTemplate/update`,
            exportAll: `${messageCenter}/messageTemplate/get`,
        }
    },
    classMgmt: {
        classMgmt: {
            search: `${messageCenter}/messageCategory/get`,
            query: `${messageCenter}/messageCategory/getCategroy`,
            del: `${messageCenter}/messageCategory/delete`,
            add: `${messageCenter}/messageCategory/add`,
            update: `${messageCenter}/messageCategory/update`
        }
    },
    ruleMgmt: {
        ruleMgmt: {
            search: `${messageCenter}/messageRule/get`,
            query: `${messageCenter}/messageRule/getRule`,
            searchCategory: `${messageCenter}/messageCategory/get`,
            getSelectList: `${messageCenter}/messageTemplate/query`,
            add: `${messageCenter}/messageRule/add`,
            del: `${messageCenter}/messageRule/delete`,
            getGroupList: `${userGroup}/etrade-user-group/qry-user-group`,
            queryTemplate: `${messageCenter}/messageTemplate/query`,
            getGroupNum: `${userGroup}/group/size`,
            uploadCSV: `${messageCenter}`,
            update: `${messageCenter}/messageRule/update`
        }
    },
    sendCount: {
        sendCount: {
            query: `${messageCenter}/messageRule/queryRuleBatch`,
            download: `${messageCenterToken}/api/services/mssWeb/selectAppPushStatusByBatch`,
            search: `${messageCenterToken}/api/services/mssWeb/statsPushTotalEx`
        },
        WXSearch: {
            query: `${messageCenter}/messageRule/queryRuleBatch`,
            search: `${messageCenterToken}/api/services/mssWeb/queryWeixinSendRecord`
        },
        msgSearch: {
            search: `${messageCenterToken}/api/services/mssWeb/getSmsSendStatus`
        },
        singlePush: {
            search: `${messageCenterToken}/api/services/mssWeb/getAppPushSingleRecord`
        }
    },
    manualMgmt: {
        manualMgmt: {
            search: `${messageCenter}/messageRule/queryRuleBatch`,
            sendMsg: `${messageCenter}/messageRule/process`,
            getGroupList: `${userGroup}/etrade-user-group/qry-user-group`,
            getRuleList: `${messageCenter}/messageRule/get`,
            searchCount: `${messageCenterToken}/api/services/mssWeb/queryNotificationStatusCount`,
            del: `${messageCenterToken}/api/services/mssWeb/deleteAllMessage`
        },
        deleteMsg: {
            del: `${messageCenterToken}/api/services/mssWeb/deleteAllMessage`
        }
    },
    scenceMgmt: {
        scenceList: {
            search: `${messageCenter}/messageRule/getSceneRule`
        },
        scenceAdd: {
            search: `${messageCenter}/messageRule/get`,
            add: `${messageCenter}/messageRule/addSceneRule`
        },
        upReplyRule: {
            query: `${messageCenter}/messageRule/rule/message/reply/config/list`,
            add: `${messageCenter}/messageRule/rule/message/reply/config/add`
        }
    },
    tokenSearch: {
        tokenSearch: {
            search: `${messageCenterToken}/api/services/mssWeb/getUserPushSetting`,
            clearToken: `${messageCenterToken}/api/services/mssWeb/clearInvalidIosToken`,
            query: `${messageCenterToken}/api/services/mssWeb/getTokenInfo`
        }
    },
    auditMgmt: {
        leaveWordMgmt: {
            queryList: `${sfs}/sfs-message-board-comments/query-by-page`,
            getTitleList: `${sfs}/sfs-message-board-comments/get-article-titles`,
            getItemType: `${sfs}/sfs-message-board-comments/get-comment-to-item-tps`,
            managerList: `${sfs}/sfs-message-board-comments/get-fund-manage`,
            refreshFundManage: `${sfs}/sfs-message-board-comments/refresh-fund-manage`,
            updateStatus: `${sfs}/sfs-message-board-comments/update-comment-status`,
            addMessage: `${sfs}/sfs-message-board-replies/add-message-boards-replies`,
            getMessage: `${sfs}/sfs-message-board-replies/get-message-boards-replies`,
            deleteMessage: `${sfs}/sfs-message-board-replies/delete-message-boards-replies`,
            modifyMessage: `${sfs}/sfs-message-board-replies/update-replies-context`,
        },
        nicknameToReview: {
            nicknameGetList: `${icif}/custs/query-app`,
            nicknameCheck: `${icif}/pcusts/check-nickname-app`,
            headImageCheck: `${icif}/pcusts/check-avatar-image-app`
        },
        idCardHandle: {
            getServerList: `${icif}/custs/query-app`,
            getTranslate: `${CS}/param/params`
        },
        idCardReview: {
            getServerList: `${icif}/custs/query-app`,
            IdImageCheck: `${icif}/pcusts/check-avatar-image-app`,
            getTranslate: `${CS}/param/params`,
            checkPass: `${icif}/pcusts/check-cust-image-app`,
        }
    },
    socialMgmt: {
        parameterMgmt: {
            getTableData: `${scp}/parameter/list`,
            saveParam: `${scp}/parameter/`,
            deleteParam: `${scp}/parameter/`,
            update: `${scp}/parameter/`
        },
        publicOfferReview: {
            getTableData: `${scp}/firm-offers/list`,
            checkParams: `${scp}/firm-offers/detail`,
            publicStatus: `${scp}/firm-offers/public-confirm`,
        },
        firmOfferRank: {
            getTableData: `${scp}/firm-offers/rank-yieldscore`,
            checkParams: `${scp}/firm-offers/detail`
        }
    },
    blackListMgmt: {
        shortMessageMgmt: {
            getTableData: `${messageCenterBlackList}/api/services/mssWeb/queryBlacklist`,
            saveParam: `${messageCenterBlackList}/api/services/mssWeb/insertBlacklist`,
            deleteParam: `${messageCenterBlackList}/api/services/mssWeb/deleteBlacklist`
        },
        amlMgmt:{
            getTableData: `${icif}/blacks/aml-errors/qry`,
            deleteParam: `${icif}/blacks/aml-errors/del`,
            queryFundAccts:`${icif}/fundaccts/qry-by-cust-no`
        }
    },
};
