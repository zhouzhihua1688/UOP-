const request = require('./../../../local_data/requestWrapper');
const apiUrlList = require('../apiConfig').fundTag.fundTagMgmt;
const XLSX = require('xlsx');
const fs = require('fs');
module.exports = function (app) {
    // 获取初始数据和查询
    app.post('/businessMgmt/fundTag/fundTagMgmt/getTableData.ajax', (req, res, next) => {
        let params = {};
        req.body.pageNum && (params.pageNum = req.body.pageNum);
        req.body.pageSize && (params.pageSize = req.body.pageSize);
        let option = {
            session: req.session,
            url: apiUrlList.getTableData,
            // body: params,
            timeout: 15000,
            json: true
        };
        console.log("yahaha");
        console.log('/businessMgmt/fundTag/fundTagMgmt/getTableData.ajax option:', option);
        request(option, (error, response, body) => {
            console.log('/businessMgmt/fundTag/fundTagMgmt/getTableData.ajax error:', error);
            console.log('/businessMgmt/fundTag/fundTagMgmt/getTableData.ajax statusCode:', response && response.statusCode);
            console.log('/businessMgmt/fundTag/fundTagMgmt/getTableData.ajax body:', body);
            if (error) {
                return res.send({
                    error: 1,
                    msg: '查询失败'
                });
            }
            let result = typeof body === 'string' ? JSON.parse(body) : body;
            console.log(result,'---result----');
            // console.log(123);
            if (result && result.returnCode == '0') {
                var resultData=result.body;
                resultData.forEach((item) => {
                    item.check = false;
                });
                return res.send({error: 0, msg: '查询成功', data: resultData});
            }
            else if (result && result.returnCode != 9999) {
                return res.send({error: 1, msg: result.returnMsg});
            }
            else {
                return res.send({error: 1, msg: '查询失败'});
            }
        });
    });
    // 导出全量
    app.get('/businessMgmt/fundTag/fundTagMgmt/exportAll.ajax', (req, res, next) => {
        // let result = [
        //     {
        //         tagId: '0020',
        //         tagName: 'aaa',
        //         childTag: [{
        //             tagId:'0021',
        //             tagName: 'bbb'
        //         }]
        //     }
        // ];

        let getParentTagInfo = new Promise((resolve, reject) => {
            let option = {
                session: req.session,
                url: apiUrlList.getTableData,
                timeout: 15000,
                json: true
            };
            request(option, (error, response, body) => {
                if (error) {
                    reject({message: '获取主标签ID失败'});
                }
                if (body && body.returnCode == 0 && Array.isArray(body.body)) {
                    resolve(body.body.map(item => {
                        let obj = {};
                        obj.tagId = item.tagid;
                        obj.tagName = item.tagnm;
                        obj.childTag = [];
                        return obj;
                    }));
                }
                else if (body.returnCode != 0 && body.returnCode != 9999) {
                    reject({message: body.returnMsg});
                }
                else {
                    reject({message: '获取主标签ID失败'});
                }
            });
        });

        function getChildTagInfoByTagId(item) {
            return new Promise((resolve, reject) => {
                let option = {
                    session: req.session,
                    url: apiUrlList.getTagDetail[0] + item.tagId + apiUrlList.getTagDetail[1],
                    qs: {tagId: item.tagId},
                    timeout: 15000,
                    json: true
                };
                request(option, (error, response, body) => {
                    if (error) {
                        reject({message: '获取子标签ID失败'});
                    }
                    if (body && body.returnCode == 0 && Array.isArray(body.body)) {
                        item.childTag = body.body.map(item => {
                            let obj = {};
                            obj.tagId = item.tagvalue;
                            obj.tagName = item.tagdesc;
                            return obj;
                        });
                        resolve();
                    }
                    else if (body.returnCode != 0 && body.returnCode != 9999) {
                        reject({message: body.returnMsg});
                    }
                    else {
                        reject({message: '获取子标签ID失败'});
                    }
                });
            });
        }

        getParentTagInfo.then(parentTagList => {
            Promise.all(parentTagList.map(item => getChildTagInfoByTagId(item))).then(() => {
                let ExcelData = [['标签代码', '标签名称', '次级标签ID', '次级标签名称']];
                parentTagList.forEach(parentTagInfo => {
                    parentTagInfo.childTag.forEach(childTagInfo => {
                        ExcelData.push([
                            parentTagInfo.tagId,
                            parentTagInfo.tagName,
                            childTagInfo.tagId,
                            childTagInfo.tagName
                        ]);
                    });
                });
                const stream = require('stream');
                const book = XLSX.utils.book_new();
                const sheet = XLSX.utils.aoa_to_sheet(ExcelData);
                XLSX.utils.book_append_sheet(book, sheet, "test");
                const fileContents = XLSX.write(book, {type: 'buffer', bookType: 'xlsx', bookSST: false});
                let readStream = new stream.PassThrough();
                readStream.end(fileContents);
                let myDate = new Date();
                let mytime = myDate.toLocaleDateString();
                let fileName = mytime + ".xlsx";
                res.set('Content-disposition', 'attachment; filename=' + fileName);
                res.set('Content-Type', 'text/plain');
                readStream.pipe(res);
            }).catch(error => {
                res.send({error: 1, msg: error.message, data: null});
            });
        }).catch(error => {
            res.send({error: 1, msg: error.message, data: null});
        });
    });
};

