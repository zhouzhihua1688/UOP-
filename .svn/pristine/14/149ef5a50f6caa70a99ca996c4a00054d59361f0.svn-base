
var vm = new Vue({
	el: '#content',
	data: function () {
			return {

					tableData: [],
					productData: [],

					currentIndex: 0,
					maxSpace: 5,
					totalPage: 0,
					pageMaxNum: 10,

					currentIndex2: 0,
					maxSpace2: 5,
					totalPage2: 0,
					pageMaxNum2: 10,
					diaMsg: '',
					loadingShow: false,  //loading动画
					showText:'数据加载中...',
					
			//主页面所用字段
					modifyStatus:'1',
		 // 弹窗字段
					addStatus:'N',  //上架状态的选择
					contentType:'', //类型字段
					singLableFirst:' ',   //关联标签
					singLableSecond:' ',   //关联标签
					flag:false,
					// 添加修改弹窗里的材料熟悉类型
					materialProperty:[{value: '0',name: '现有材料',checked: false},{value: '1',name: '新增材料',checked: true}],
					// 添加修改弹窗里的类型
					typeList: [{value: 'FILE',name: '文件',checked: false}, 
					{value: 'WORD', name: '文字',checked: false}, 
					{value: 'PIC', name: '图片',checked: false}, {value: 'LINK',name: '链接',checked: false}],
					fileUrl:'',  //添加弹窗里上传文件所用字段
					uploadingFile: {   //上传文件
							name: '',
							progressRate: ''
					},
			}
	},
	mounted: function () {
			var dialogs = ['info', 'del'];
			dialogs.forEach(function (id) {
					$('#' + id).on('shown.bs.modal', function () {
							var $this = $(this);
							var dialog = $this.find('.modal-dialog');
							var top = ($(window).height() - dialog.height()) / 2;
							dialog.css({
									marginTop: top
							});
					});
			});
			// this.getTableData(0);
	},
	computed: {
			pageList: function () {
					var arr = [];
					if (this.totalPage <= 2 * this.maxSpace) {
							for (var i = 0; i < this.totalPage; i++) {
									arr.push(i + 1);
							}
							return arr;
					}
					if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
							for (var i = this.currentIndex - this.maxSpace; i < this.currentIndex + this.maxSpace; i++) {
									arr.push(i + 1);
							}
					} else if (this.currentIndex <= this.maxSpace && this.totalPage - this.currentIndex > this.maxSpace) {
							for (var i = 0; i < this.currentIndex + (2 * this.maxSpace - this.currentIndex); i++) {
									arr.push(i + 1);
							}
					} else if (this.currentIndex > this.maxSpace && this.totalPage - this.currentIndex <= this.maxSpace) {
							var space = this.totalPage - this.currentIndex;
							for (var i = this.currentIndex - (2 * this.maxSpace - space); i < this.totalPage; i++) {
									arr.push(i + 1);
							}
					} else {
							for (var i = 0; i < this.totalPage; i++) {
									arr.push(i + 1);
							}
					}
					return arr;
			},
	},
	watch: {
			pageMaxNum: function () {
					this.getTableData(0);
			},
	 
	},
	methods: {
			// 切换主页面menuList背景颜色--选择标签
			// 全选按钮
			checkAll($event){
					// return;
					$event.preventDefault();
					this.allChecked.checked= !this.allChecked.checked;
					for (p in this.menuList) {
							this.menuList[p].checked = this.allChecked.checked;
					}
			},
			// 点击单个标签点击选中
			checkSingle:function($event,index){
					$event.preventDefault();
					// this.bgIndex = index;   //背景索引
					this.menuList[index].checked = !this.menuList[index].checked;
					let checkAllFlag = true;
					for (p in this.menuList) {
							if(p =='checked') continue;
							if(!this.menuList[p].checked){
									// 有一个没有选中，则全选也不选中
									checkAllFlag = false;
									break
							}
					}
					this.allChecked.checked = checkAllFlag;
			},
			//添加修改弹窗里选择材料属性checkbox-单选
			chooseSingle(index) {
					this.materialProperty.forEach(item => {
						 item.checked = false;  
					})
					// 选中当前
					this.materialProperty[index].checked = true;
			},
			//添加修改弹窗里选择类型radio-单选
			changeTypeList(item, index) {
					var _this = this;
					$.each(_this.typeList, function (index, item) {
							item.checked = false;
					})
					_this.typeList[index].checked = true;
					_this.contentType = _this.typeList[index].value;
			},
			 // 添加弹窗里选择上架状态
			changeAddStatus() {
					var _this = this;
					if (_this.addStatus == 'N') {
							_this.addStatus = 'Y'
					} else {
							_this.addStatus = 'N'
					}
			},
			// 添加弹窗里关联标签
			chooseLableFirst:function(value){
				 this.singLableFirst=value;
			},
			chooseLableSecond:function(value){
				 this.singLableSecond=value;
			 },
			// 主表格数据
			getTableData: function (currentIndex) {
					//   console.log(currentIndex);
					var _this = this;
					var params = {};
					params.userType = this.roleId; //用户类型
					if(this.channelSubData){
						params.channel = this.channelData+'-'+this.channelSubData; //一级加二级渠道
					}else{
						params.channel = this.channelData; //一级渠道
					}
					params.searchMaterial = this.searchMaterial; //访问内容
					params.searchName = this.searchName; //姓名
					params.startTime = this.startTime;
					params.endTime = this.endTime;
					params.page = currentIndex + 1;
					params.size = this.pageMaxNum;
					console.log(params);
					$(".cover").show();
					_this.tableData=[];
					$.post({
							url: '/contentMgmt/productMaterial/investPrefecture/getTableData.ajax',
							data: params,
							success: function (result) {
									$(".cover").hide();
									if (result.error === 0) {
											_this.currentIndex = currentIndex;
											_this.totalPage = Math.ceil(result.data.body.total / params.size);
											if(result.data.body.data) {
													_this.tableData = result.data.body.data?result.data.body.data:[];
											}else{
													_this.showText='暂无数据';
											}
									}
									else {
											$(".cover").hide();
											_this.tableData = [];
											_this.showText='暂无数据';
											_this.currentIndex = 0;
											_this.showDialog('', 'info', false, result.msg);
									}
							}
					});

			},
			// 新增修改弹窗
			showAdd:function(){
				 var _this=this;
				 _this.modifyStatus=0;  //弹出新增弹窗
				 _this.showDialog('', 'add');
			},
			//点击选择内容-显示内容数据弹窗
			showContent:function(){
				 var _this=this;   
				 _this.showDialog('add', 'contentShow',false);  
			},
			//文件上传-有进度条
			uploadsFile(e) {
					var _this = this;
					let file = e.target.files[0];
					this.uploadingFile.name = file.name;
					console.log("fileName===", file.name);
					var formdata = new FormData(); //创建formdata对象
					formdata.append('file', file);
					$(".cover").show();
					$.post({
							url: '/contentMgmt/productMaterial/investPrefecture/uploadImg.ajax',
							type: 'post',
							dataType: 'json',
							data: formdata,
							processData: false,
							contentType: false,
							xhr: function () {
									var xhr = new XMLHttpRequest();
									//使用XMLHttpRequest.upload监听上传过程，注册progress事件，打印回调函数中的event事件
									xhr.upload.addEventListener('progress', function (e) {
											//loaded代表上传了多少
											//total代表总数为多少
											_this.uploadingFile.progressRate = (e.loaded / e.total) * 100 + '%';
											$('.g-progress').css('width', (e.loaded / e.total) * 100 + '%');
									})
									return xhr;
							},
							success: function (result) {
									if (result.error === 0) {
											$(".cover").hide();
											_this.fileUrl = result.data.imageUrl;
											console.log(result.data.imageUrl);
											//解决不能重复添加问题
											$('#uploadsFile').attr('type', 'text')
											$('#uploadsFile').attr('type', 'file')
											_this.showDialog('add', 'info', true, result.msg);
									} else {
											_this.showDialog('add', 'info', true, result.msg);
											//解决不能重复添加问题
											$('#uploadsFile').attr('type', 'text')
											$('#uploadsFile').attr('type', 'file')
									}
							}
					})
							
			},

			//主表格分页方法
			prev: function () {
					if (this.currentIndex <= 0) {
							return;
					}
					this.getTableData1(this.currentIndex - 1);
			},
			next: function () {
					if (this.currentIndex >= this.totalPage - 1) {
							return;
					}
					this.getTableData1(this.currentIndex + 1);
			},
			changeIndex: function (index) {
					this.getTableData1(index - 1);
			},
			toFirst: function () {
					this.getTableData1(0);
			},
			toLast: function () {
					this.getTableData1(this.totalPage - 1);
			},

			showDialog: function (dia1, dia2, callback, msg) {
					if (msg) {
							this.diaMsg = msg;
					}
					else {
							msg = '输入条件错误';
					}
					if (!dia1) {
							$('#' + dia2).modal('show');
					}
					else if (!dia2) {
							$('#' + dia1).modal('hide');
					}
					else if (!callback) {
							$('#' + dia1).on("hidden.bs.modal", function () {
									$('#' + dia2).modal('show');
									$('#' + dia1).off().on("hidden", "hidden.bs.modal");
							});
							$('#' + dia1).modal('hide');
					}
					else {
							$('#' + dia1).on("hidden.bs.modal", function () {
									$('#' + dia2).on("hidden.bs.modal", function () {
											$('#' + dia1).modal("show");
											$('#' + dia2).off().on("hidden", "hidden.bs.modal");
									});
									$('#' + dia2).modal("show");
									$('#' + dia1).off().on("hidden", "hidden.bs.modal");
							});
							$('#' + dia1).modal('hide');
					}
			},
			transformTime(createTime) {
					let date = new Date(Number(createTime));
					let year = date.getFullYear();
					let month = date.getMonth() + 1;
					let day = date.getDate();
					let h = date.getHours()
					let i = date.getMinutes()
					let s = date.getSeconds();
					month = month < 10 ? '0' + month : month;
					day = day < 10 ? '0' + day : day;
					if (h < 10) {
							h = '0' + h;
					}
					if (i < 10) {
							i = '0' + i;
					}
					if (s < 10) {
							s = '0' + s;
					}
					let dateT = year + '-' + month + '-' + day + " " + h + ':' + i + ':' + s
					return dateT
			}
	},
	components: {
			'date-picker': VueBootstrapDatetimePicker
	},
});